{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/actions/AddBotActions.js","app/actions/FooterActions.js","app/actions/SearchActions.js","app/alt.js","app/components/App.js","app/components/Footer.js","app/components/homepage/Commonbots.js","app/components/homepage/Search.js","app/components/homepage/Sidebar.js","app/components/homepage/searchbox.js","app/components/uploadpage/Uploadform.js","app/components/uploadpage/alert.js","app/components/uploadpage/countries.js","app/components/uploadpage/imageUpload.js","app/main.js","app/routes.js","app/stores/AddBotStore.js","app/stores/FooterStore.js","app/stores/SearchStore.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/fbjs/lib/shallowEqual.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/isomorphic-fetch/fetch-npm-browserify.js","node_modules/lodash/dist/lodash.js","node_modules/muicss/lib/js/config.js","node_modules/muicss/lib/js/lib/forms.js","node_modules/muicss/lib/js/lib/jqLite.js","node_modules/muicss/lib/js/lib/util.js","node_modules/muicss/lib/react/_helpers.js","node_modules/muicss/lib/react/_textfieldHelpers.js","node_modules/muicss/lib/react/appbar.js","node_modules/muicss/lib/react/babel-helpers.js","node_modules/muicss/lib/react/button.js","node_modules/muicss/lib/react/caret.js","node_modules/muicss/lib/react/checkbox.js","node_modules/muicss/lib/react/col.js","node_modules/muicss/lib/react/container.js","node_modules/muicss/lib/react/divider.js","node_modules/muicss/lib/react/dropdown-item.js","node_modules/muicss/lib/react/dropdown.js","node_modules/muicss/lib/react/form.js","node_modules/muicss/lib/react/input.js","node_modules/muicss/lib/react/option.js","node_modules/muicss/lib/react/panel.js","node_modules/muicss/lib/react/radio.js","node_modules/muicss/lib/react/row.js","node_modules/muicss/lib/react/select.js","node_modules/muicss/lib/react/tab.js","node_modules/muicss/lib/react/tabs.js","node_modules/muicss/lib/react/textarea.js","node_modules/muicss/react.js","node_modules/process/browser.js","node_modules/react-addons-shallow-compare/index.js","node_modules/warning/browser.js","node_modules/whatwg-fetch/fetch.js"],"names":[],"mappings":"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M,W;AAEF,2BAAa;AAAA;;AACT;AACA,aAAK,WAAL;AACA,aAAK,MAAL,GAAc,EAAd;AACA,aAAK,eAAL,GAAuB,EAAvB;AACA,aAAK,qBAAL,GAA6B,EAA7B;AACH;;AAED;;;;;wCACgB,c,EAAe;AAC3B,iBAAK,qBAAL,GAA6B,aAA7B;AACA,iBAAK,eAAL,GAAuB,mBAAvB;AACH;;;qCAEY,Y,EAAa;AACtB,iBAAK,qBAAL,GAA6B,WAA7B;AACA,iBAAK,eAAL,GAAuB,kBAAvB;AACH;;;uCAEc,K,EAAM;AACjB,iBAAK,MAAL,GAAc,MAAM,MAAN,CAAa,KAA3B;AACA,iBAAK,qBAAL,GAA6B,EAA7B;AACA,iBAAK,eAAL,GAAuB,EAAvB;AACH;;;0CAEiB;AACd,iBAAK,qBAAL,GAA6B,WAA7B;AACA,iBAAK,eAAL,GAAuB,kBAAvB;AACH;;;;;;kBAGU,cAAI,WAAJ,CAAgB,WAAhB,C;;;ACpCfpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnv3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChppDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxfile":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import alt from '../alt';\n\nclass AddBotActions {\n    constructor() {\n        this.generateActions(\n            'addBotSuccess',\n            'addBotFail',\n            'updateBotName',\n            'updateCompanyName',\n            'updateBotDescription',\n            'updateCategory',\n            'invalidName',\n            'invalidCompanyName',\n            'invalidBotDescription',\n            'invalidCategory'\n        );\n    }\n\n    addBot(botname, companyname, botdescription, category) {\n        $.ajax({\n            type: 'POST',\n            url: '/api/v1/upload',\n            data: {\n                botname: botname,\n                companyname: companyname,\n                botdescription: botdescription,\n                category: category\n            }\n        })\n            .done((data) => {\n                this.actions.addBotSuccess(data.message);\n            })\n            .fail((jqXhr) => {\n                this.actions.addBotFail(jqXhr.responseJSON.message);\n            });\n    }\n}\n\nexport default alt.createActions(AddBotActions);","import alt from '../alt';\r\n\r\nclass FooterActions {\r\n  constructor() {\r\n    this.generateActions(\r\n      'getTopCharactersSuccess',\r\n      'getTopCharactersFail'\r\n    );\r\n  }\r\n\r\n  getTopCharacters() {\r\n    $.ajax({ url: '/api/characters/top' })\r\n      .done((data) => {\r\n        this.actions.getTopCharactersSuccess(data)\r\n      })\r\n      .fail((jqXhr) => {\r\n        this.actions.getTopCharactersFail(jqXhr)\r\n      });\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FooterActions);","import alt from '../alt';\n\nclass SearchActions {\n    constructor() {\n        this.generateActions(\n            'searchSuccess',\n            'searchFail',\n            'updateSearch',\n            'invalidSearch'\n        );\n    }\n\n    performSearch(search) {\n        $.ajax({\n            type: 'GET',\n            url: '/api/v1/search',\n            data: {\n                search: search,\n            }\n        })\n            .done((data) => {\n                this.actions.searchSuccess(data.message);\n            })\n            .fail((jqXhr) => {\n                this.actions.searchFail(jqXhr.responseJSON.message);\n            });\n\n    }\n}\n\nexport default alt.createActions(SearchActions);","import Alt from 'alt';\r\n\r\nexport default new Alt();","import React from 'react';\r\nimport Search from \"./homepage/Search\";\r\nimport Sidebar from \"./homepage/Sidebar\";\r\nimport Commonbots from \"./homepage/Commonbots\";\r\nimport Uploadform from \"./uploadpage/Uploadform\";\r\nimport Footer from './Footer';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state ={\r\n      fields:{}\r\n    }\r\n  }\r\n  onSubmit(fields){\r\n    this.setState({ fields})\r\n    console.log(\"app.js received this data:\" , this.state.fields);\r\n  }\r\n\r\n  render() {\r\n    \r\n    //<Uploadform onSubmit={this.onSubmit(this.state.fields)}/>\r\n\r\n    var header = {\r\n      textAlign: 'center',\r\n      color: '#000'\r\n    };\r\n    return (\r\n      <div className=\"App\">\r\n        <Search />\r\n        <div>                \r\n        <Commonbots />\r\n                \r\n        </div>\r\n   \r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Link } from 'react-router';\r\nimport FooterStore from '../stores/FooterStore'\r\nimport FooterActions from '../actions/FooterActions';\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = FooterStore.getState();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        FooterStore.listen(this.onChange);\r\n        FooterActions.getTopCharacters();\r\n    }\r\n    componentWillUnmount() {\r\n        FooterStore.unlisten(this.onChange);\r\n    }\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <div className='col-sm-2'>\r\n                            <h3>Bot Store</h3>\r\n                            <p>© 2017 Cysect.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Input from 'muicss/lib/react/input';\r\nimport SearchBox from './searchbox';\r\n'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class Commonbots extends Component {\r\n  render() {\r\n    var bot = {\r\n      textAlign: 'left',\r\n      color: '#000',\r\n      fontSize: '20px'\r\n    };\r\n    var icon = {\r\n      border: 'black solid 3px',\r\n      borderRadius: '10px',\r\n      width: '220px',\r\n      height: '200px'\r\n    };\r\n    var botdetails = {\r\n      marginLeft: '120px',\r\n      marginTop: '-70px'\r\n    };\r\n    return (\r\n      <div className=\"head text-center\">\r\n        <SearchBox />\r\n        <h1>Commonly Searched Bots</h1>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/bs.jpeg\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Bot Store</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">A bot to help you find other bots.</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/gta5.jpg\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Bot Store</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Play GTA 5 on this bot.</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star \"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/tico.png\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Art Bot</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Find all creative designs here</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/bible.jpg\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Bible bot</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Search for bible verses</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star\"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/cartoon.jpg\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Cartoon Network</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Watch your favorite cartoons here.</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/sports.jpg\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Sports</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Get to know what happens in the sports world.</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span>\r\n            <span className=\"fa fa-star checked\"></span></span></a></p>\r\n        </div>\r\n        <div className=\"col-md-4 product simpleCart_shelfItem text-center\">\r\n          <a href=\"single.html\"><img style={icon} src=\"img/janta.png\" alt=\"\" /></a>\r\n          <div class=\"mask\">\r\n            <a href=\"single.html\">Janta bot</a>\r\n          </div>\r\n          <a className=\"product_name\" href=\"single.html\">Find nearby handy men</a>\r\n          <p><a className=\"item_add\" href=\"#\"><i></i> <span className=\"item_price\">\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span>\r\n            <span className=\"fa fa-star\"></span></span></a></p>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react';\r\n\r\nexport default class Search extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-inverse\">\r\n          <div className=\"container-fluid\">\r\n\r\n            <ul className=\"nav navbar-nav\">\r\n              <li className=\"active\"><a href=\"#\">Home</a></li>\r\n              <li><a href=\"/upload\">Upload</a></li>\r\n            </ul>\r\n\r\n            <div className=\"navbar-header\">\r\n              <a className=\"navbar-brand\" href=\"#\">BOT STORE</a>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nexport default class Sidebar extends Component {\r\n  render() {\r\n    var buttondiv = {\r\n      marginTop: '-400px',\r\n      marginLeft: '30px',\r\n      width: '300px',\r\n      height: '400px',\r\n      border: 'grey solid 2px',\r\n      borderRadius: '4px',\r\n      backgroundColor: 'lightgoldenrodyellow'\r\n    };\r\n    var button = {\r\n      marginLeft: '50px',\r\n      marginTop: '50px',\r\n      marginBottom: '10px',\r\n      borderRadius: '5px',\r\n      width: '200px',\r\n      height: '50px',\r\n      textDecoration: 'none',\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n      color: 'black',\r\n      fontSize: '17px'\r\n    };\r\n    return (\r\n      <div  className=\"Sidebar\" style={buttondiv}>\r\n        <form action=\"/upload\">\r\n          <input type=\"submit\" style={button} value=\"Upload your bot\" />\r\n        </form>\r\n        <form action=\"/upload\">\r\n          <input type=\"submit\" style={button} value=\"Edit your bot\" />\r\n        </form>\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react';\r\nimport SearchStore from '../../stores/SearchStore';\r\nimport SearchActions from '../../actions/SearchActions';\r\n\r\n\r\nexport default class SearchBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = SearchStore.getState();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        SearchStore.listen(this.onChange);\r\n    }\r\n    componentWillUnmount() {\r\n        SearchStore.unlisten(this.onChange);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        var search = this.state.search.trim();\r\n\r\n        if (!search) {\r\n            SearchActions.invalidSearch();\r\n            this.refs.searchTextField.getDOMNode().focus();\r\n        }\r\n\r\n        if (search) {\r\n            SearchActions.performSearch(search);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var searchStyle = {\r\n            width: '20px',\r\n            height: '16px'\r\n        }\r\n        var spanresults = {\r\n            zIndex: '99',\r\n            margin: '0 auto'\r\n        }\r\n        var results = {\r\n            background: 'white',\r\n            height: 'auto',\r\n            width: '350px',\r\n            color: 'black'\r\n        }\r\n        var botlabel = {\r\n            fontSize: '30px',\r\n            fontFamily: 'Ar Darling',\r\n            left: '20px',\r\n        }\r\n        var searchbox = {\r\n            margin: 'auto',\r\n            padding: '100px 40px'\r\n        }\r\n        return (\r\n            <div className='head row flipInX animated'>\r\n                    <div className=\"container\">\r\n                    <form onSubmit={this.handleSubmit.bind(this)} className=\"col-sm-4\">\r\n                        <label style={botlabel} className='control-label'>BOTSTORE</label>\r\n                        <div style={searchbox} className='input-group'>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Search\"\r\n                                ref='searchTextField' value={this.state.search}\r\n                                onChange={SearchActions.updateSearch} autofocus />\r\n                            <div className=\"input-group-btn\">\r\n                                <button className=\"btn btn-default\" type=\"submit\">\r\n                                    <img style={searchStyle} src=\"img/searchicon.png\" alt=\"\" />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <span style={spanresults} className={this.state.searchValidationState + 'help-block'}><div style={results}>{this.state.searchHelpBlock}</div></span>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Search from \"../homepage/Search\";\r\nimport Input from 'muicss/lib/react/input';\r\nimport Textarea from 'muicss/lib/react/textarea';\r\nimport Select from 'muicss/lib/react/select';\r\nimport Option from 'muicss/lib/react/option';\r\nimport Button from 'muicss/lib/react/button';\r\nimport Countries from './countries';\r\nimport fetch from 'isomorphic-fetch';\r\nimport ImageUploader from './imageUpload';\r\nimport Alert from './alert';\r\n\r\n\r\n\r\nexport default class Uploadform extends Component {\r\n\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div >\r\n\t\t\t\t\t<nav className=\"navbar navbar-inverse\">\r\n\t\t\t\t\t\t<div className=\"container-fluid\">\r\n\r\n\t\t\t\t\t\t\t<ul className=\"nav navbar-nav\">\r\n\t\t\t\t\t\t\t\t<li ><a href=\"/\">Home</a></li>\r\n\t\t\t\t\t\t\t\t<li className=\"active\"><a href=\"/upload\">Upload</a></li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<div className=\"navbar-header\">\r\n\t\t\t\t\t\t\t\t<a className=\"navbar-brand\" href=\"#\">BOT STORE</a>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</nav>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Alert />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n","import React from 'react';\nimport AddBotStore from '../../stores/AddBotStore'\nimport AddBotActions from '../../actions/AddBotActions';\nimport Countries from './countries';\n\nclass UploadBot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = AddBotStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    AddBotStore.listen(this.onChange);\n  }\n  componentWillUnmount() {\n    AddBotStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    var botname = this.state.botname.trim();\n    var companyname = this.state.companyname.trim();\n    var botdescription = this.state.botdescription;\n    var category = this.state.category;\n\n    if (!botname) {\n      AddBotActions.invalidName();\n      this.refs.botNameTextField.getDOMNode().focus();\n    }\n\n    if (!companyname) {\n      AddBotActions.invalidCompanyName();\n      this.refs.companyNameTextField.getDOMNode().focus();\n    }\n\n    if (!botdescription) {\n      AddBotActions.invalidBotDescription();\n      this.refs.descriptionTextField.getDOMNode().focus();\n    }\n\n    if (category) {\n      AddBotActions.invalidCategory();\n      this.refs.categoryTextField.getDOMNode().focus();\n    }\n\n    if (botname && companyname && botdescription && category) {\n      AddBotActions.addBot(botname, companyname, botdescription, category);\n    }\n  }\n  render() {\n    return (\n      <div className='container'>\n        <div className='row flipInX animated'>\n          <div className='col-sm-8'>\n            <div className='panel panel-default'>\n              <div className='panel-heading'>Upload Bot</div>\n              <div className='panel-body'>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                  <div className={'form-group ' + this.state.nameValidationState}>\n                    <label className='control-label'>Bot Name</label>\n                    <input type='text' className='form-control' ref='botNameTextField' value={this.state.botname}\n                      onChange={AddBotActions.updateBotName} autoFocus />\n                    <span className='help-block'>{this.state.botHelpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.companyNameValidationState}>\n                    <label className='control-label'>Company Name</label>\n                    <input type='text' className='form-control' ref='companyNameTextField' value={this.state.companyname}\n                      onChange={AddBotActions.updateCompanyName} />\n                    <span className='help-block'>{this.state.companyHelpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.descriptionValidationState}>\n                    <label className='control-label'>Bot description</label>\n                    <input type='text' className='form-control' ref='descriptionTextField' value={this.state.botdescription}\n                      onChange={AddBotActions.updateBotDescription} />\n                    <span className='help-block'>{this.state.categoryHelpBlock}</span>\n                  </div>\n                  <div className={'form-group ' + this.state.categoryValidationState}>\n                    <label className='control-label'>Category</label>\n                    <div className='form-control' ref='categoryTextField' value={this.state.category}\n                      onChange={AddBotActions.updateCategory} >\n                      <Countries />\n                    </div>\n                    <span className='help-block'>{this.state.categoryHelpBlock}</span>\n                  </div>\n                  <button type='submit' className='btn btn-primary'>Submit</button>\n                  <span className={'help-block'  + this.state.nameValidationState}>{this.state.btnHelpBlock}</span>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default UploadBot;","import React, { Component } from 'react';\r\n\r\n\r\nimport { Select,Option } \r\nfrom \"muicss/react\";\r\n\r\n\r\nexport default class Countries extends Component {\r\n  \r\n  render() {\r\n\r\n    return (\r\n   \r\n      <select>\r\n        <Option value=\"Afghanistan\" label=\"Afghanistan\">Afghanistan</Option>\r\n        <Option value=\"Åland Islands\" label=\"Åland Islands\">Åland Islands</Option>\r\n        <Option value=\"Albania\" label=\"Albania\">Albania</Option>\r\n        <Option value=\"Algeria\" label=\"Algeria\">Algeria</Option>\r\n        <Option value=\"American Samoa\" label=\"American Samoa\">American Samoa</Option>\r\n        <Option value=\"Andorra\" label=\"Andorra\">Andorra</Option>\r\n        <Option value=\"Angola\" label=\"Angola\">Angola</Option>\r\n        <Option value=\"Anguilla\" label=\"Anguilla\">Anguilla</Option>\r\n        <Option value=\"Antarctica\" label=\"Antarctica\">Antarctica</Option>\r\n        <Option value=\"Antigua and Barbuda\" label=\"Antigua and Barbuda\">Antigua and Barbuda</Option>\r\n        <Option value=\"Argentina\" label=\"Argentina\">Argentina</Option>\r\n        <Option value=\"Armenia\" label=\"Armenia\">Armenia</Option>\r\n        <Option value=\"Aruba\" label=\"Aruba\">Aruba</Option>\r\n        <Option value=\"Australia\" label=\"Australia\">Australia</Option>\r\n        <Option value=\"Austria\" label=\"Austria\">Austria</Option>\r\n        <Option value=\"Azerbaijan\" label=\"Azerbaijan\">Azerbaijan</Option>\r\n        <Option value=\"Bahamas\" label=\"Bahamas\">Bahamas</Option>\r\n        <Option value=\"Bahrain\" label=\"Bahrain\">Bahrain</Option>\r\n        <Option value=\"Bangladesh\" label=\"Bangladesh\">Bangladesh</Option>\r\n        <Option value=\"Barbados\" label=\"Barbados\">Barbados</Option>\r\n        <Option value=\"Belarus\" label=\"Belarus\">Belarus</Option>\r\n        <Option value=\"Belgium\" label=\"Belgium\">Belgium</Option>\r\n        <Option value=\"Belize\" label=\"Belize\">Belize</Option>\r\n        <Option value=\"Benin\" label=\"Benin\">Benin</Option>\r\n        <Option value=\"Bermuda\" label=\"Bermuda\">Bermuda</Option>\r\n        <Option value=\"Bhutan\" label=\"Bhutan\">Bhutan</Option>\r\n        <Option value=\"Bolivia, Plurinational State of\" label=\"Bolivia, Plurinational State of\">Bolivia, Plurinational State of</Option>\r\n        <Option value=\"Bonaire, Sint Eustatius and Saba\" label=\"Bonaire, Sint Eustatius and Saba\">Bonaire, Sint Eustatius and Saba</Option>\r\n        <Option value=\"Bosnia and Herzegovina\" label=\"Bosnia and Herzegovina\">Bosnia and Herzegovina</Option>\r\n        <Option value=\"Botswana\" label=\"Botswana\">Botswana</Option>\r\n        <Option value=\"Bouvet Island\" label=\"Bouvet Island\">Bouvet Island</Option>\r\n        <Option value=\"Brazil\" label=\"Brazil\">Brazil</Option>\r\n        <Option value=\"British Indian Ocean Territory\" label=\"British Indian Ocean Territory\">British Indian Ocean Territory</Option>\r\n        <Option value=\"Brunei Darussalam\" label=\"Brunei Darussalam\">Brunei Darussalam</Option>\r\n        <Option value=\"Bulgaria\" label=\"Bulgaria\">Bulgaria</Option>\r\n        <Option value=\"Burkina Faso\" label=\"Burkina Faso\">Burkina Faso</Option>\r\n        <Option value=\"Burundi\" label=\"Burundi\">Burundi</Option>\r\n        <Option value=\"Cambodia\" label=\"Cambodia\">Cambodia</Option>\r\n        <Option value=\"Cameroon\" label=\"Cameroon\">Cameroon</Option>\r\n        <Option value=\"Canada\" label=\"Canada\">Canada</Option>\r\n        <Option value=\"Cape Verde\" label=\"Cape Verde\">Cape Verde</Option>\r\n        <Option value=\"Cayman Islands\" label=\"Cayman Islands\">Cayman Islands</Option>\r\n        <Option value=\"Central African Republic\" label=\"Central African Republic\">Central African Republic</Option>\r\n        <Option value=\"Chad\" label=\"Chad\">Chad</Option>\r\n        <Option value=\"Chile\" label=\"Chile\">Chile</Option>\r\n        <Option value=\"China\" label=\"China\">China</Option>\r\n        <Option value=\"Christmas Island\" label=\"Christmas Island\">Christmas Island</Option>\r\n        <Option value=\"Cocos (Keeling) Islands\" label=\"Cocos (Keeling) Islands\">Cocos (Keeling) Islands</Option>\r\n        <Option value=\"Colombia\" label=\"Colombia\">Colombia</Option>\r\n        <Option value=\"Comoros\" label=\"Comoros\">Comoros</Option>\r\n        <Option value=\"Congo\" label=\"Congo\">Congo</Option>\r\n        <Option value=\"Congo, the Democratic Republic of the\" label=\"Congo, the Democratic Republic of the\">Congo, the Democratic Republic of the</Option>\r\n        <Option value=\"Cook Islands\" label=\"Cook Islands\">Cook Islands</Option>\r\n        <Option value=\"Costa Rica\" label=\"Costa Rica\">Costa Rica</Option>\r\n        <Option value=\"Côte d'Ivoire\" label=\"Côte d'Ivoire\">Côte d'Ivoire</Option>\r\n        <Option value=\"Croatia\" label=\"Croatia\">Croatia</Option>\r\n        <Option value=\"Cuba\" label=\"Cuba\">Cuba</Option>\r\n        <Option value=\"Curaçao\" label=\"Curaçao\">Curaçao</Option>\r\n        <Option value=\"Cyprus\" label=\"Cyprus\">Cyprus</Option>\r\n        <Option value=\"Czech Republic\" label=\"Czech Republic\">Czech Republic</Option>\r\n        <Option value=\"Denmark\" label=\"Denmark\">Denmark</Option>\r\n        <Option value=\"Djibouti\" label=\"Djibouti\">Djibouti</Option>\r\n        <Option value=\"Dominica\" label=\"Dominica\">Dominica</Option>\r\n        <Option value=\"Dominican Republic\" label=\"Dominican Republic\">Dominican Republic</Option>\r\n        <Option value=\"Ecuador\" label=\"Ecuador\">Ecuador</Option>\r\n        <Option value=\"Egypt\" label=\"Egypt\">Egypt</Option>\r\n        <Option value=\"El Salvador\" label=\"El Salvador\">El Salvador</Option>\r\n        <Option value=\"Equatorial Guinea\" label=\"Equatorial Guinea\">Equatorial Guinea</Option>\r\n        <Option value=\"Eritrea\" label=\"Eritrea\">Eritrea</Option>\r\n        <Option value=\"Estonia\" label=\"Estonia\">Estonia</Option>\r\n        <Option value=\"Ethiopia\" label=\"Ethiopia\">Ethiopia</Option>\r\n        <Option value=\"Falkland Islands (Malvinas)\" label=\"Falkland Islands (Malvinas)\">Falkland Islands (Malvinas)</Option>\r\n        <Option value=\"Faroe Islands\" label=\"Faroe Islands\">Faroe Islands</Option>\r\n        <Option value=\"Fiji\" label=\"Fiji\">Fiji</Option>\r\n        <Option value=\"Finland\" label=\"Finland\">Finland</Option>\r\n        <Option value=\"France\" label=\"France\">France</Option>\r\n        <Option value=\"French Guiana\" label=\"French Guiana\">French Guiana</Option>\r\n        <Option value=\"French Polynesia\" label=\"French Polynesia\">French Polynesia</Option>\r\n        <Option value=\"French Southern Territories\" label=\"French Southern Territories\">French Southern Territories</Option>\r\n        <Option value=\"Gabon\" label=\"Gabon\">Gabon</Option>\r\n        <Option value=\"Gambia\" label=\"Gambia\">Gambia</Option>\r\n        <Option value=\"Georgia\" label=\"Georgia\">Georgia</Option>\r\n        <Option value=\"Germany\" label=\"Germany\">Germany</Option>\r\n        <Option value=\"Ghana\" label=\"Ghana\">Ghana</Option>\r\n        <Option value=\"Gibraltar\" label=\"Gibraltar\">Gibraltar</Option>\r\n        <Option value=\"Greece\" label=\"Greece\">Greece</Option>\r\n        <Option value=\"Greenland\" label=\"Greenland\">Greenland</Option>\r\n        <Option value=\"Grenada\" label=\"Grenada\">Grenada</Option>\r\n        <Option value=\"Guadeloupe\" label=\"Guadeloupe\">Guadeloupe</Option>\r\n        <Option value=\"Guam\" label=\"Guam\">Guam</Option>\r\n        <Option value=\"Guatemala\" label=\"Guatemala\">Guatemala</Option>\r\n        <Option value=\"Guernsey\" label=\"Guernsey\">Guernsey</Option>\r\n        <Option value=\"Guinea\" label=\"Guinea\">Guinea</Option>\r\n        <Option value=\"Guinea-Bissau\" label=\"Guinea-Bissau\">Guinea-Bissau</Option>\r\n        <Option value=\"Guyana\" label=\"Guyana\">Guyana</Option>\r\n        <Option value=\"Haiti\" label=\"Haiti\">Haiti</Option>\r\n        <Option value=\"Heard Island and McDonald Islands\" label=\"Heard Island and McDonald Islands\">Heard Island and McDonald Islands</Option>\r\n        <Option value=\"Holy See (Vatican City State)\" label=\"Holy See (Vatican City State)\">Holy See (Vatican City State)</Option>\r\n        <Option value=\"Honduras\" label=\"Honduras\">Honduras</Option>\r\n        <Option value=\"Hong Kong\" label=\"Hong Kong\">Hong Kong</Option>\r\n        <Option value=\"Hungary\" label=\"Hungary\">Hungary</Option>\r\n        <Option value=\"Iceland\" label=\"Iceland\">Iceland</Option>\r\n        <Option value=\"India\" label=\"India\">India</Option>\r\n        <Option value=\"Indonesia\" label=\"Indonesia\">Indonesia</Option>\r\n        <Option value=\"Iran, Islamic Republic of\" label=\"Iran, Islamic Republic of\">Iran, Islamic Republic of</Option>\r\n        <Option value=\"Iraq\" label=\"Iraq\">Iraq</Option>\r\n        <Option value=\"Ireland\" label=\"Ireland\">Ireland</Option>\r\n        <Option value=\"Isle of Man\" label=\"Isle of Man\">Isle of Man</Option>\r\n        <Option value=\"Israel\" label=\"Israel\">Israel</Option>\r\n        <Option value=\"Italy\" label=\"Italy\">Italy</Option>\r\n        <Option value=\"Jamaica\" label=\"Jamaica\">Jamaica</Option>\r\n        <Option value=\"Japan\" label=\"Japan\">Japan</Option>\r\n        <Option value=\"Jersey\" label=\"Jersey\">Jersey</Option>\r\n        <Option value=\"Jordan\" label=\"Jordan\">Jordan</Option>\r\n        <Option value=\"Kazakhstan\" label=\"Kazakhstan\">Kazakhstan</Option>\r\n        <Option value=\"Kenya\" label=\"Kenya\">Kenya</Option>\r\n        <Option value=\"Kiribati\" label=\"Kiribati\">Kiribati</Option>\r\n        <Option value=\"Korea, Democratic People's Republic of\" label=\"Korea, Democratic People's Republic of\">Korea, Democratic People's Republic of</Option>\r\n        <Option value=\"Korea, Republic of\" label=\"Korea, Republic of\">Korea, Republic of</Option>\r\n        <Option value=\"Kuwait\" label=\"Kuwait\">Kuwait</Option>\r\n        <Option value=\"Kyrgyzstan\" label=\"Kyrgyzstan\">Kyrgyzstan</Option>\r\n        <Option value=\"Lao People's Democratic Republic\" label=\"Lao People's Democratic Republic\">Lao People's Democratic Republic</Option>\r\n        <Option value=\"Latvia\" label=\"Latvia\">Latvia</Option>\r\n        <Option value=\"Lebanon\" label=\"Lebanon\">Lebanon</Option>\r\n        <Option value=\"Lesotho\" label=\"Lesotho\">Lesotho</Option>\r\n        <Option value=\"Liberia\" label=\"Liberia\">Liberia</Option>\r\n        <Option value=\"Libya\" label=\"Libya\">Libya</Option>\r\n        <Option value=\"Liechtenstein\" label=\"Liechtenstein\">Liechtenstein</Option>\r\n        <Option value=\"Lithuania\" label=\"Lithuania\">Lithuania</Option>\r\n        <Option value=\"Luxembourg\" label=\"Luxembourg\">Luxembourg</Option>\r\n        <Option value=\"Macao\" label=\"Macao\">Macao</Option>\r\n        <Option value=\"Macedonia, the former Yugoslav Republic of\" label=\"Macedonia, the former Yugoslav Republic of\">Macedonia, the former Yugoslav Republic of</Option>\r\n        <Option value=\"Madagascar\" label=\"Madagascar\">Madagascar</Option>\r\n        <Option value=\"Malawi\" label=\"Malawi\">Malawi</Option>\r\n        <Option value=\"Malaysia\" label=\"Malaysia\">Malaysia</Option>\r\n        <Option value=\"Maldives\" label=\"Maldives\">Maldives</Option>\r\n        <Option value=\"Mali\" label=\"Mali\">Mali</Option>\r\n        <Option value=\"Malta\" label=\"Malta\">Malta</Option>\r\n        <Option value=\"Marshall Islands\" label=\"Marshall Islands\">Marshall Islands</Option>\r\n        <Option value=\"Martinique\" label=\"Martinique\">Martinique</Option>\r\n        <Option value=\"Mauritania\" label=\"Mauritania\">Mauritania</Option>\r\n        <Option value=\"Mauritius\" label=\"Mauritius\">Mauritius</Option>\r\n        <Option value=\"Mayotte\" label=\"Mayotte\">Mayotte</Option>\r\n        <Option value=\"Mexico\" label=\"Mexico\">Mexico</Option>\r\n        <Option value=\"Micronesia, Federated States of\" label=\"Micronesia, Federated States of\">Micronesia, Federated States of</Option>\r\n        <Option value=\"Moldova, Republic of\" label=\"Moldova, Republic of\">Moldova, Republic of</Option>\r\n        <Option value=\"Monaco\" label=\"Monaco\">Monaco</Option>\r\n        <Option value=\"Mongolia\" label=\"Mongolia\">Mongolia</Option>\r\n        <Option value=\"Montenegro\" label=\"Montenegro\">Montenegro</Option>\r\n        <Option value=\"Montserrat\" label=\"Montserrat\">Montserrat</Option>\r\n        <Option value=\"Morocco\" label=\"Morocco\">Morocco</Option>\r\n        <Option value=\"Mozambique\" label=\"Mozambique\">Mozambique</Option>\r\n        <Option value=\"Myanmar\" label=\"Myanmar\">Myanmar</Option>\r\n        <Option value=\"Namibia\" label=\"Namibia\">Namibia</Option>\r\n        <Option value=\"Nauru\" label=\"Nauru\">Nauru</Option>\r\n        <Option value=\"Nepal\" label=\"Nepal\">Nepal</Option>\r\n        <Option value=\"Netherlands\" label=\"Netherlands\">Netherlands</Option>\r\n        <Option value=\"New Caledonia\" label=\"New Caledonia\">New Caledonia</Option>\r\n        <Option value=\"New Zealand\" label=\"New Zealand\">New Zealand</Option>\r\n        <Option value=\"Nicaragua\" label=\"Nicaragua\">Nicaragua</Option>\r\n        <Option value=\"Niger\" label=\"Niger\">Niger</Option>\r\n        <Option value=\"Nigeria\" label=\"Nigeria\">Nigeria</Option>\r\n        <Option value=\"Niue\" label=\"Niue\">Niue</Option>\r\n        <Option value=\"Norfolk Island\" label=\"Norfolk Island\">Norfolk Island</Option>\r\n        <Option value=\"Northern Mariana Islands\" label=\"Northern Mariana Islands\">Northern Mariana Islands</Option>\r\n        <Option value=\"Norway\" label=\"Norway\">Norway</Option>\r\n        <Option value=\"Oman\" label=\"Oman\">Oman</Option>\r\n        <Option value=\"Pakistan\" label=\"Pakistan\">Pakistan</Option>\r\n        <Option value=\"Palau\" label=\"Palau\">Palau</Option>\r\n        <Option value=\"Palestinian Territory, Occupied\" label=\"Palestinian Territory, Occupied\">Palestinian Territory, Occupied</Option>\r\n        <Option value=\"Panama\" label=\"Panama\">Panama</Option>\r\n        <Option value=\"Papua New Guinea\" label=\"Papua New Guinea\">Papua New Guinea</Option>\r\n        <Option value=\"Paraguay\" label=\"Paraguay\">Paraguay</Option>\r\n        <Option value=\"Peru\" label=\"Peru\">Peru</Option>\r\n        <Option value=\"Philippines\" label=\"Philippines\">Philippines</Option>\r\n        <Option value=\"Pitcairn\" label=\"Pitcairn\">Pitcairn</Option>\r\n        <Option value=\"Poland\" label=\"Poland\">Poland</Option>\r\n        <Option value=\"Portugal\" label=\"Portugal\">Portugal</Option>\r\n        <Option value=\"Puerto Rico\" label=\"Puerto Rico\">Puerto Rico</Option>\r\n        <Option value=\"Qatar\" label=\"Qatar\">Qatar</Option>\r\n        <Option value=\"Réunion\" label=\"Réunion\">Réunion</Option>\r\n        <Option value=\"Romania\" label=\"Romania\">Romania</Option>\r\n        <Option value=\"Russian Federation\" label=\"Russian Federation\">Russian Federation</Option>\r\n        <Option value=\"Rwanda\" label=\"Rwanda\">Rwanda</Option>\r\n        <Option value=\"Saint Barthélemy\" label=\"Saint Barthélemy\">Saint Barthélemy</Option>\r\n        <Option value=\"Saint Helena, Ascension and Tristan da Cunha\" label=\"Saint Helena, Ascension and Tristan da Cunha\">Saint Helena, Ascension and Tristan da Cunha</Option>\r\n        <Option value=\"Saint Kitts and Nevis\" label=\"Saint Kitts and Nevis\">Saint Kitts and Nevis</Option>\r\n        <Option value=\"Saint Lucia\" label=\"Saint Lucia\">Saint Lucia</Option>\r\n        <Option value=\"Saint Martin (French part)\" label=\"Saint Martin (French part)\">Saint Martin (French part)</Option>\r\n        <Option value=\"Saint Pierre and Miquelon\" label=\"Saint Pierre and Miquelon\">Saint Pierre and Miquelon</Option>\r\n        <Option value=\"Saint Vincent and the Grenadines\" label=\"Saint Vincent and the Grenadines\">Saint Vincent and the Grenadines</Option>\r\n        <Option value=\"Samoa\" label=\"Samoa\">Samoa</Option>\r\n        <Option value=\"San Marino\" label=\"San Marino\">San Marino</Option>\r\n        <Option value=\"Sao Tome and Principe\" label=\"Sao Tome and Principe\">Sao Tome and Principe</Option>\r\n        <Option value=\"Saudi Arabia\" label=\"Saudi Arabia\">Saudi Arabia</Option>\r\n        <Option value=\"Senegal\" label=\"Senegal\">Senegal</Option>\r\n        <Option value=\"Serbia\" label=\"Serbia\">Serbia</Option>\r\n        <Option value=\"Seychelles\" label=\"Seychelles\">Seychelles</Option>\r\n        <Option value=\"Sierra Leone\" label=\"Sierra Leone\">Sierra Leone</Option>\r\n        <Option value=\"Singapore\" label=\"Singapore\">Singapore</Option>\r\n        <Option value=\"Sint Maarten (Dutch part)\" label=\"Sint Maarten (Dutch part)\">Sint Maarten (Dutch part)</Option>\r\n        <Option value=\"Slovakia\" label=\"Slovakia\">Slovakia</Option>\r\n        <Option value=\"Slovenia\" label=\"Slovenia\">Slovenia</Option>\r\n        <Option value=\"Solomon Islands\" label=\"Solomon Islands\">Solomon Islands</Option>\r\n        <Option value=\"Somalia\" label=\"Somalia\">Somalia</Option>\r\n        <Option value=\"South Africa\" label=\"South Africa\">South Africa</Option>\r\n        <Option value=\"South Georgia and the South Sandwich Islands\" label=\"South Georgia and the South Sandwich Islands\">South Georgia and the South Sandwich Islands</Option>\r\n        <Option value=\"South Sudan\" label=\"South Sudan\">South Sudan</Option>\r\n        <Option value=\"Spain\" label=\"Spain\">Spain</Option>\r\n        <Option value=\"Sri Lanka\" label=\"Sri Lanka\">Sri Lanka</Option>\r\n        <Option value=\"Sudan\" label=\"Sudan\">Sudan</Option>\r\n        <Option value=\"Suriname\" label=\"Suriname\">Suriname</Option>\r\n        <Option value=\"Svalbard and Jan Mayen\" label=\"Svalbard and Jan Mayen\">Svalbard and Jan Mayen</Option>\r\n        <Option value=\"Swaziland\" label=\"Swaziland\">Swaziland</Option>\r\n        <Option value=\"Sweden\" label=\"Sweden\">Sweden</Option>\r\n        <Option value=\"Switzerland\" label=\"Switzerland\">Switzerland</Option>\r\n        <Option value=\"Syrian Arab Republic\" label=\"Syrian Arab Republic\">Syrian Arab Republic</Option>\r\n        <Option value=\"Taiwan, Province of China\" label=\"Taiwan, Province of China\">Taiwan, Province of China</Option>\r\n        <Option value=\"Tajikistan\" label=\"Tajikistan\">Tajikistan</Option>\r\n        <Option value=\"Tanzania, United Republic of\" label=\"Tanzania, United Republic of\">Tanzania, United Republic of</Option>\r\n        <Option value=\"Thailand\" label=\"Thailand\">Thailand</Option>\r\n        <Option value=\"Timor-Leste\" label=\"Timor-Leste\">Timor-Leste</Option>\r\n        <Option value=\"Togo\" label=\"Togo\">Togo</Option>\r\n        <Option value=\"Tokelau\" label=\"Tokelau\">Tokelau</Option>\r\n        <Option value=\"Tonga\" label=\"Tonga\">Tonga</Option>\r\n        <Option value=\"Trinidad and Tobago\" label=\"Trinidad and Tobago\">Trinidad and Tobago</Option>\r\n        <Option value=\"Tunisia\" label=\"Tunisia\">Tunisia</Option>\r\n        <Option value=\"Turkey\" label=\"Turkey\">Turkey</Option>\r\n        <Option value=\"Turkmenistan\" label=\"Turkmenistan\">Turkmenistan</Option>\r\n        <Option value=\"Turks and Caicos Islands\" label=\"Turks and Caicos Islands\">Turks and Caicos Islands</Option>\r\n        <Option value=\"Tuvalu\" label=\"Tuvalu\">Tuvalu</Option>\r\n        <Option value=\"Uganda\" label=\"Uganda\">Uganda</Option>\r\n        <Option value=\"Ukraine\" label=\"Ukraine\">Ukraine</Option>\r\n        <Option value=\"United Arab Emirates\" label=\"United Arab Emirates\">United Arab Emirates</Option>\r\n        <Option value=\"United Kingdom\" label=\"United Kingdom\">United Kingdom</Option>\r\n        <Option value=\"United States\" label=\"United States\">United States</Option>\r\n        <Option value=\"United States Minor Outlying Islands\" label=\"United States Minor Outlying Islands\">United States Minor Outlying Islands</Option>\r\n        <Option value=\"Uruguay\" label=\"Uruguay\">Uruguay</Option>\r\n        <Option value=\"Uzbekistan\" label=\"Uzbekistan\">Uzbekistan</Option>\r\n        <Option value=\"Vanuatu\" label=\"Vanuatu\">Vanuatu</Option>\r\n        <Option value=\"Venezuela, Bolivarian Republic of\" label=\"Venezuela, Bolivarian Republic of\">Venezuela, Bolivarian Republic of</Option>\r\n        <Option value=\"Viet Nam\" label=\"Viet Nam\">Viet Nam</Option>\r\n        <Option value=\"Virgin Islands, British\" label=\"Virgin Islands, British\">Virgin Islands, British</Option>\r\n        <Option value=\"Virgin Islands, U.S.\" label=\"Virgin Islands, U.S.\">Virgin Islands, U.S.</Option>\r\n        <Option value=\"Wallis and Futuna\" label=\"Wallis and Futuna\">Wallis and Futuna</Option>\r\n        <Option value=\"Western Sahara\" label=\"Western Sahara\">Western Sahara</Option>\r\n        <Option value=\"Yemen\" label=\"Yemen\">Yemen</Option>\r\n        <Option value=\"Zambia\" label=\"Zambia\">Zambia</Option>\r\n        <Option value=\"Zimbabwe\" label=\"Zimbabwe\">Zimbabwe</Option>\r\n\r\n      </select>  \r\n\r\n    \r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {bindAll} from 'lodash';\r\n\r\nclass ImageUploader extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data_uri: null,\r\n      processing: false\r\n    }\r\n\r\n    bindAll(this, 'handleFile', 'handleSubmit');\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const _this = this;\r\n\r\n    this.setState({\r\n      processing: true\r\n    });\r\n\r\n    const promise = $.ajax({\r\n      url: '/api/v1/image',\r\n      type: \"POST\",\r\n      data: {\r\n        data_uri: this.state.data_uri,\r\n        filename: this.state.filename,\r\n        filetype: this.state.filetype\r\n      },\r\n      dataType: 'json'\r\n    });\r\n\r\n    promise.done(function(data){\r\n      _this.setState({\r\n        processing: false,\r\n        uploaded_uri: data.uri\r\n      });\r\n    });\r\n  }\r\n\r\n  handleFile(e) {\r\n    const reader = new FileReader();\r\n    const file = e.target.files[0];\r\n\r\n    reader.onload = (upload) => {\r\n      this.setState({\r\n        data_uri: upload.target.result,\r\n        filename: file.name,\r\n        filetype: file.type\r\n      });\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  render() {\r\n    let processing;\r\n    let uploaded;\r\n\r\n    if (this.state.uploaded_uri) {\r\n      uploaded = (\r\n        <div>\r\n          <h4>Image uploaded!</h4>\r\n          <img className='image-preview' src={this.state.uploaded_uri} />\r\n          <pre className='image-link-box'>{this.state.uploaded_uri}</pre>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.processing) {\r\n      processing = \"Processing image, hang tight\";\r\n    }\r\n\r\n    return (\r\n      <div className='row'>\r\n        <div className='col-sm-12'>\r\n          <label>Upload an image</label>\r\n          <form onSubmit={this.handleSubmit} encType=\"multipart/form-data\">\r\n            <input type=\"file\" onChange={this.handleFile} />\r\n            {processing}\r\n          </form>\r\n          {uploaded}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageUploader;","import React from 'react';\r\nimport Router from 'react-router';\r\nimport ReactDOM from 'react-dom';\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\r\nimport routes from './routes';\r\n\r\nlet history = createBrowserHistory();\r\nReactDOM.render(<Router history={history}>{routes}</Router>, document.getElementById('app'));","import React from 'react';\r\nimport {Route, Router} from 'react-router';\r\nimport App from './components/App';\r\n\r\nimport Uploadform from './components/uploadpage/Uploadform'\r\n\r\nexport default (\r\n  <div >\r\n  <Router >\r\n     <Route path=\"/\" component={App} />\r\n     <Route path=\"/upload\" component={Uploadform} />\r\n  </Router>\r\n </div>\r\n)","import alt from '../alt';\nimport AddBotActions from '../actions/AddBotActions';\n\nclass AddBotStore {\n  constructor() {\n      //default state\n    this.bindActions(AddBotActions);\n    this.botname = '';\n    this.companyname = '';\n    this.botdescription = '';\n    this.category = '';\n    this.btnHelpBlock = '';\n    this.botHelpBlock = '';\n    this.companyHelpBlock = '';\n    this.descriptionHelpBlock = '';\n    this.categoryHelpBlock = '';\n    this.nameValidationState = '';\n    this.companyNameValidationState = '';\n    this.descriptionValidationState = '';\n    this.categoryValidationState = '';\n  }\n//the bot has been successfully added\n  onAddBotSuccess(successMessage) {\n    this.nameValidationState = 'has-success';\n    this.btnHelpBlock = \"Bot sucessfully saved\";\n  }\n\n  onAddBotFail(errorMessage) {\n    this.nameValidationState = 'has-error';\n    this.btnHelpBlock = \"Cannot save the bot\";\n  }\n\n  onUpdateBotName(event) {\n    this.botname = event.target.value;\n    this.nameValidationState = '';\n    this.botHelpBlock = '';\n  }\n\n  onUpdateCompanyName(event) {\n    this.companyname = event.target.value;\n    this.companyNameValidationState = '';\n    this.companyHelpBlock = '';\n  }\n\n  onUpdateBotDescription(event) {\n      this.botdescription = event.target.value;\n      this.descriptionValidationState = '';\n      this.descriptionHelpBlock = '';\n  }\n\n  onUpdateCategory(event) {\n    this.category = event.target.value;\n    this.categoryValidationState = '';\n    this.categoryHelpBlock = '';\n  }\n\n  onInvalidName() {\n    this.nameValidationState = 'has-error';\n    this.botHelpBlock = \"Please enter the bot's name.\";\n  }\n\n  onInvalidCompanyName() {\n    this.companyNameValidationState = 'has-error';\n    this.companyHelpBlock = \"Please enter the company's name.\";\n  }\n\n  onInavlidBotDescription() {\n      this.descriptionValidationState = 'has-error';\n      this.descriptionHelpBlock = \"Please enter the bot's description\";\n  }\n\n  onInvalidCategory() {\n    this.categoryValidationState = 'has-error';\n    this.categoryHelpBlock = \"Please choose the bot's category\"\n  }\n\n}\n\nexport default alt.createStore(AddBotStore);","import alt from '../alt';\r\nimport FooterActions from '../actions/FooterActions';\r\n\r\nclass FooterStore {\r\n  constructor() {\r\n    this.bindActions(FooterActions);\r\n    this.characters = [];\r\n  }\r\n\r\n  onGetTopCharactersSuccess(data) {\r\n    this.characters = data.slice(0, 5);\r\n  }\r\n\r\n  onGetTopCharactersFail(jqXhr) {\r\n    // Handle multiple response formats, fallback to HTTP status code number.\r\n    toastr.error(jqXhr.responseJSON && jqXhr.responseJSON.message || jqXhr.responseText || jqXhr.statusText);\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FooterStore);","import alt from '../alt';\nimport SearchActions from '../actions/SearchActions';\n\nclass SearchStore {\n    \n    constructor(){\n        //defaultstate\n        this.bindActions(SearchActions);\n        this.search = '';\n        this.searchHelpBlock = '';\n        this.searchValidationState = '';\n    }\n\n    //the search is successful\n    onSearchSuccess(successMessage){\n        this.searchValidationState = 'has-success';\n        this.searchHelpBlock = \"search successful\";\n    }\n\n    onSearchFail(errorMessage){\n        this.searchValidationState = 'has-error';\n        this.searchHelpBlock = \"No results found\";\n    }\n\n    onUpdateSearch(event){\n        this.search = event.target.value;\n        this.searchValidationState = '';\n        this.searchHelpBlock = '';\n    }\n\n    onInvalidSearch() {\n        this.searchValidationState = 'has-error';\n        this.searchHelpBlock = 'No results found';\n    }\n}\n\nexport default alt.createStore(SearchStore);","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","/**\n * @license\n * Lo-Dash 1.0.2 (Custom Build) <http://lodash.com/>\n * Build: `lodash modern -o ./dist/lodash.js`\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.4.4 <http://underscorejs.org/>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n * Available under MIT license <http://lodash.com/license>\n */\n;(function(window, undefined) {\n\n  /** Detect free variable `exports` */\n  var freeExports = typeof exports == 'object' && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;\n\n  /** Detect free variable `global` and use it as `window` */\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal) {\n    window = freeGlobal;\n  }\n\n  /** Used for array and object method references */\n  var arrayRef = [],\n      objectRef = {};\n\n  /** Used to generate unique IDs */\n  var idCounter = 0;\n\n  /** Used internally to indicate various things */\n  var indicatorObject = objectRef;\n\n  /** Used by `cachedContains` as the default size when optimizations are enabled for large arrays */\n  var largeArraySize = 30;\n\n  /** Used to restore the original `_` reference in `noConflict` */\n  var oldDash = window._;\n\n  /** Used to match HTML entities */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;\n\n  /** Used to match empty string literals in compiled template source */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match regexp flags from their coerced string values */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect if a method is native */\n  var reNative = RegExp('^' +\n    (objectRef.valueOf + '')\n      .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replace(/valueOf|for [^\\]]+/g, '.+?') + '$'\n  );\n\n  /**\n   * Used to match ES6 template delimiters\n   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match \"interpolate\" template delimiters */\n  var reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to ensure capturing order of template delimiters */\n  var reNoMatch = /($^)/;\n\n  /** Used to match HTML characters */\n  var reUnescapedHtml = /[&<>\"']/g;\n\n  /** Used to match unescaped characters in compiled string literals */\n  var reUnescapedString = /['\\n\\r\\t\\u2028\\u2029\\\\]/g;\n\n  /** Used to make template sourceURLs easier to identify */\n  var templateCounter = 0;\n\n  /** Native method shortcuts */\n  var ceil = Math.ceil,\n      concat = arrayRef.concat,\n      floor = Math.floor,\n      getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,\n      hasOwnProperty = objectRef.hasOwnProperty,\n      push = arrayRef.push,\n      toString = objectRef.toString;\n\n  /* Native method shortcuts for methods with the same name as other `lodash` methods */\n  var nativeBind = reNative.test(nativeBind = slice.bind) && nativeBind,\n      nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray,\n      nativeIsFinite = window.isFinite,\n      nativeIsNaN = window.isNaN,\n      nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys,\n      nativeMax = Math.max,\n      nativeMin = Math.min,\n      nativeRandom = Math.random;\n\n  /** `Object#toString` result shortcuts */\n  var argsClass = '[object Arguments]',\n      arrayClass = '[object Array]',\n      boolClass = '[object Boolean]',\n      dateClass = '[object Date]',\n      funcClass = '[object Function]',\n      numberClass = '[object Number]',\n      objectClass = '[object Object]',\n      regexpClass = '[object RegExp]',\n      stringClass = '[object String]';\n\n  /** Detect various environments */\n  var isIeOpera = !!window.attachEvent,\n      isV8 = nativeBind && !/\\n|true/.test(nativeBind + isIeOpera);\n\n  /* Detect if `Function#bind` exists and is inferred to be fast (all but V8) */\n  var isBindFast = nativeBind && !isV8;\n\n  /* Detect if `Object.keys` exists and is inferred to be fast (IE, Opera, V8) */\n  var isKeysFast = nativeKeys && (isIeOpera || isV8);\n\n  /** Used to identify object classifications that `_.clone` supports */\n  var cloneableClasses = {};\n  cloneableClasses[funcClass] = false;\n  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =\n  cloneableClasses[boolClass] = cloneableClasses[dateClass] =\n  cloneableClasses[numberClass] = cloneableClasses[objectClass] =\n  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;\n\n  /** Used to lookup a built-in constructor by [[Class]] */\n  var ctorByClass = {};\n  ctorByClass[arrayClass] = Array;\n  ctorByClass[boolClass] = Boolean;\n  ctorByClass[dateClass] = Date;\n  ctorByClass[objectClass] = Object;\n  ctorByClass[numberClass] = Number;\n  ctorByClass[regexpClass] = RegExp;\n  ctorByClass[stringClass] = String;\n\n  /** Used to determine if values are of the language type Object */\n  var objectTypes = {\n    'boolean': false,\n    'function': true,\n    'object': true,\n    'number': false,\n    'string': false,\n    'undefined': false\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\t': 't',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a `lodash` object, that wraps the given `value`, to enable method\n   * chaining.\n   *\n   * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:\n   * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,\n   * and `unshift`\n   *\n   * The chainable wrapper functions are:\n   * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`, `compose`,\n   * `concat`, `countBy`, `debounce`, `defaults`, `defer`, `delay`, `difference`,\n   * `filter`, `flatten`, `forEach`, `forIn`, `forOwn`, `functions`, `groupBy`,\n   * `initial`, `intersection`, `invert`, `invoke`, `keys`, `map`, `max`, `memoize`,\n   * `merge`, `min`, `object`, `omit`, `once`, `pairs`, `partial`, `partialRight`,\n   * `pick`, `pluck`, `push`, `range`, `reject`, `rest`, `reverse`, `shuffle`,\n   * `slice`, `sort`, `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`,\n   * `union`, `uniq`, `unshift`, `values`, `where`, `without`, `wrap`, and `zip`\n   *\n   * The non-chainable wrapper functions are:\n   * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `has`, `identity`,\n   * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`, `isEmpty`,\n   * `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`, `isObject`,\n   * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`, `lastIndexOf`,\n   * `mixin`, `noConflict`, `pop`, `random`, `reduce`, `reduceRight`, `result`,\n   * `shift`, `size`, `some`, `sortedIndex`, `template`, `unescape`, and `uniqueId`\n   *\n   * The wrapper functions `first` and `last` return wrapped values when `n` is\n   * passed, otherwise they return unwrapped values.\n   *\n   * @name _\n   * @constructor\n   * @category Chaining\n   * @param {Mixed} value The value to wrap in a `lodash` instance.\n   * @returns {Object} Returns a `lodash` instance.\n   */\n  function lodash(value) {\n    // exit early if already wrapped, even if wrapped by a different `lodash` constructor\n    if (value && typeof value == 'object' && value.__wrapped__) {\n      return value;\n    }\n    // allow invoking `lodash` without the `new` operator\n    if (!(this instanceof lodash)) {\n      return new lodash(value);\n    }\n    this.__wrapped__ = value;\n  }\n\n  /**\n   * By default, the template delimiters used by Lo-Dash are similar to those in\n   * embedded Ruby (ERB). Change the following template settings to use alternative\n   * delimiters.\n   *\n   * @static\n   * @memberOf _\n   * @type Object\n   */\n  lodash.templateSettings = {\n\n    /**\n     * Used to detect `data` property values to be HTML-escaped.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'escape': /<%-([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect code to be evaluated.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'evaluate': /<%([\\s\\S]+?)%>/g,\n\n    /**\n     * Used to detect `data` property values to inject.\n     *\n     * @memberOf _.templateSettings\n     * @type RegExp\n     */\n    'interpolate': reInterpolate,\n\n    /**\n     * Used to reference the data object in the template text.\n     *\n     * @memberOf _.templateSettings\n     * @type String\n     */\n    'variable': '',\n\n    /**\n     * Used to import variables into the compiled template.\n     *\n     * @memberOf _.templateSettings\n     * @type Object\n     */\n    'imports': {\n\n      /**\n       * A reference to the `lodash` function.\n       *\n       * @memberOf _.templateSettings.imports\n       * @type Function\n       */\n      '_': lodash\n    }\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The template used to create iterator functions.\n   *\n   * @private\n   * @param {Obect} data The data object used to populate the text.\n   * @returns {String} Returns the interpolated text.\n   */\n  var iteratorTemplate = function(obj) {\n    \n    var __p = 'var index, iterable = ' +\n    (obj.firstArg ) +\n    ', result = iterable;\\nif (!iterable) return result;\\n' +\n    (obj.top ) +\n    ';\\n';\n     if (obj.arrays) {\n    __p += 'var length = iterable.length; index = -1;\\nif (' +\n    (obj.arrays ) +\n    ') {\\n  while (++index < length) {\\n    ' +\n    (obj.loop ) +\n    '\\n  }\\n}\\nelse {  ';\n     } ;\n    \n     if (obj.isKeysFast && obj.useHas) {\n    __p += '\\n  var ownIndex = -1,\\n      ownProps = objectTypes[typeof iterable] ? nativeKeys(iterable) : [],\\n      length = ownProps.length;\\n\\n  while (++ownIndex < length) {\\n    index = ownProps[ownIndex];\\n    ' +\n    (obj.loop ) +\n    '\\n  }  ';\n     } else {\n    __p += '\\n  for (index in iterable) {';\n        if (obj.useHas) {\n    __p += '\\n    if (';\n          if (obj.useHas) {\n    __p += 'hasOwnProperty.call(iterable, index)';\n     }    ;\n    __p += ') {    ';\n     } ;\n    __p += \n    (obj.loop ) +\n    ';    ';\n     if (obj.useHas) {\n    __p += '\\n    }';\n     } ;\n    __p += '\\n  }  ';\n     } ;\n    \n     if (obj.arrays) {\n    __p += '\\n}';\n     } ;\n    __p += \n    (obj.bottom ) +\n    ';\\nreturn result';\n    \n    \n    return __p\n  };\n\n  /** Reusable iterator options for `assign` and `defaults` */\n  var defaultsIteratorOptions = {\n    'args': 'object, source, guard',\n    'top':\n      'var args = arguments,\\n' +\n      '    argsIndex = 0,\\n' +\n      \"    argsLength = typeof guard == 'number' ? 2 : args.length;\\n\" +\n      'while (++argsIndex < argsLength) {\\n' +\n      '  iterable = args[argsIndex];\\n' +\n      '  if (iterable && objectTypes[typeof iterable]) {',\n    'loop': \"if (typeof result[index] == 'undefined') result[index] = iterable[index]\",\n    'bottom': '  }\\n}'\n  };\n\n  /** Reusable iterator options shared by `each`, `forIn`, and `forOwn` */\n  var eachIteratorOptions = {\n    'args': 'collection, callback, thisArg',\n    'top': \"callback = callback && typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg)\",\n    'arrays': \"typeof length == 'number'\",\n    'loop': 'if (callback(iterable[index], index, collection) === false) return result'\n  };\n\n  /** Reusable iterator options for `forIn` and `forOwn` */\n  var forOwnIteratorOptions = {\n    'top': 'if (!objectTypes[typeof iterable]) return result;\\n' + eachIteratorOptions.top,\n    'arrays': false\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function optimized to search large arrays for a given `value`,\n   * starting at `fromIndex`, using strict equality for comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @param {Number} [largeSize=30] The length at which an array is considered large.\n   * @returns {Boolean} Returns `true`, if `value` is found, else `false`.\n   */\n  function cachedContains(array, fromIndex, largeSize) {\n    fromIndex || (fromIndex = 0);\n\n    var length = array.length,\n        isLarge = (length - fromIndex) >= (largeSize || largeArraySize);\n\n    if (isLarge) {\n      var cache = {},\n          index = fromIndex - 1;\n\n      while (++index < length) {\n        // manually coerce `value` to a string because `hasOwnProperty`, in some\n        // older versions of Firefox, coerces objects incorrectly\n        var key = array[index] + '';\n        (hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = [])).push(array[index]);\n      }\n    }\n    return function(value) {\n      if (isLarge) {\n        var key = value + '';\n        return hasOwnProperty.call(cache, key) && indexOf(cache[key], value) > -1;\n      }\n      return indexOf(array, value, fromIndex) > -1;\n    }\n  }\n\n  /**\n   * Used by `_.max` and `_.min` as the default `callback` when a given\n   * `collection` is a string value.\n   *\n   * @private\n   * @param {String} value The character to inspect.\n   * @returns {Number} Returns the code unit of given character.\n   */\n  function charAtCallback(value) {\n    return value.charCodeAt(0);\n  }\n\n  /**\n   * Used by `sortBy` to compare transformed `collection` values, stable sorting\n   * them in ascending order.\n   *\n   * @private\n   * @param {Object} a The object to compare to `b`.\n   * @param {Object} b The object to compare to `a`.\n   * @returns {Number} Returns the sort order indicator of `1` or `-1`.\n   */\n  function compareAscending(a, b) {\n    var ai = a.index,\n        bi = b.index;\n\n    a = a.criteria;\n    b = b.criteria;\n\n    // ensure a stable sort in V8 and other engines\n    // http://code.google.com/p/v8/issues/detail?id=90\n    if (a !== b) {\n      if (a > b || typeof a == 'undefined') {\n        return 1;\n      }\n      if (a < b || typeof b == 'undefined') {\n        return -1;\n      }\n    }\n    return ai < bi ? -1 : 1;\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this` binding\n   * of `thisArg` and prepends any `partialArgs` to the arguments passed to the\n   * bound function.\n   *\n   * @private\n   * @param {Function|String} func The function to bind or the method name.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Array} partialArgs An array of arguments to be partially applied.\n   * @param {Object} [rightIndicator] Used to indicate partially applying arguments from the right.\n   * @returns {Function} Returns the new bound function.\n   */\n  function createBound(func, thisArg, partialArgs, rightIndicator) {\n    var isFunc = isFunction(func),\n        isPartial = !partialArgs,\n        key = thisArg;\n\n    // juggle arguments\n    if (isPartial) {\n      partialArgs = thisArg;\n    }\n    if (!isFunc) {\n      thisArg = func;\n    }\n\n    function bound() {\n      // `Function#bind` spec\n      // http://es5.github.com/#x15.3.4.5\n      var args = arguments,\n          thisBinding = isPartial ? this : thisArg;\n\n      if (!isFunc) {\n        func = thisArg[key];\n      }\n      if (partialArgs.length) {\n        args = args.length\n          ? (args = slice(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args))\n          : partialArgs;\n      }\n      if (this instanceof bound) {\n        // ensure `new bound` is an instance of `bound` and `func`\n        noop.prototype = func.prototype;\n        thisBinding = new noop;\n        noop.prototype = null;\n\n        // mimic the constructor's `return` behavior\n        // http://es5.github.com/#x13.2.2\n        var result = func.apply(thisBinding, args);\n        return isObject(result) ? result : thisBinding;\n      }\n      return func.apply(thisBinding, args);\n    }\n    return bound;\n  }\n\n  /**\n   * Produces a callback bound to an optional `thisArg`. If `func` is a property\n   * name, the created callback will return the property value for a given element.\n   * If `func` is an object, the created callback will return `true` for elements\n   * that contain the equivalent object properties, otherwise it will return `false`.\n   *\n   * @private\n   * @param {Mixed} [func=identity] The value to convert to a callback.\n   * @param {Mixed} [thisArg] The `this` binding of the created callback.\n   * @param {Number} [argCount=3] The number of arguments the callback accepts.\n   * @returns {Function} Returns a callback function.\n   */\n  function createCallback(func, thisArg, argCount) {\n    if (func == null) {\n      return identity;\n    }\n    var type = typeof func;\n    if (type != 'function') {\n      if (type != 'object') {\n        return function(object) {\n          return object[func];\n        };\n      }\n      var props = keys(func);\n      return function(object) {\n        var length = props.length,\n            result = false;\n        while (length--) {\n          if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {\n            break;\n          }\n        }\n        return result;\n      };\n    }\n    if (typeof thisArg != 'undefined') {\n      if (argCount === 1) {\n        return function(value) {\n          return func.call(thisArg, value);\n        };\n      }\n      if (argCount === 2) {\n        return function(a, b) {\n          return func.call(thisArg, a, b);\n        };\n      }\n      if (argCount === 4) {\n        return function(accumulator, value, index, object) {\n          return func.call(thisArg, accumulator, value, index, object);\n        };\n      }\n      return function(value, index, object) {\n        return func.call(thisArg, value, index, object);\n      };\n    }\n    return func;\n  }\n\n  /**\n   * Creates compiled iteration functions.\n   *\n   * @private\n   * @param {Object} [options1, options2, ...] The compile options object(s).\n   *  arrays - A string of code to determine if the iterable is an array or array-like.\n   *  useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n   *  args - A string of comma separated arguments the iteration function will accept.\n   *  top - A string of code to execute before the iteration branches.\n   *  loop - A string of code to execute in the object loop.\n   *  bottom - A string of code to execute after the iteration branches.\n   *\n   * @returns {Function} Returns the compiled function.\n   */\n  function createIterator() {\n    var data = {\n      // support properties\n      'isKeysFast': isKeysFast,\n\n      // iterator options\n      'arrays': 'isArray(iterable)',\n      'bottom': '',\n      'loop': '',\n      'top': '',\n      'useHas': true\n    };\n\n    // merge options into a template data object\n    for (var object, index = 0; object = arguments[index]; index++) {\n      for (var key in object) {\n        data[key] = object[key];\n      }\n    }\n    var args = data.args;\n    data.firstArg = /^[^,]+/.exec(args)[0];\n\n    // create the function factory\n    var factory = Function(\n        'createCallback, hasOwnProperty, isArguments, isArray, isString, ' +\n        'objectTypes, nativeKeys',\n      'return function(' + args + ') {\\n' + iteratorTemplate(data) + '\\n}'\n    );\n    // return the compiled function\n    return factory(\n      createCallback, hasOwnProperty, isArguments, isArray, isString,\n      objectTypes, nativeKeys\n    );\n  }\n\n  /**\n   * A function compiled to iterate `arguments` objects, arrays, objects, and\n   * strings consistenly across environments, executing the `callback` for each\n   * element in the `collection`. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, index|key, collection). Callbacks may exit\n   * iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @type Function\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   */\n  var each = createIterator(eachIteratorOptions);\n\n  /**\n   * Used by `template` to escape characters for inclusion in compiled\n   * string literals.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeStringChar(match) {\n    return '\\\\' + stringEscapes[match];\n  }\n\n  /**\n   * Used by `escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {String} match The matched character to escape.\n   * @returns {String} Returns the escaped character.\n   */\n  function escapeHtmlChar(match) {\n    return htmlEscapes[match];\n  }\n\n  /**\n   * Checks if `value` is a DOM node in IE < 9.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true` if the `value` is a DOM node, else `false`.\n   */\n  function isNode(value) {\n    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`\n    // methods that are `typeof` \"string\" and still can coerce nodes to strings\n    return typeof value.toString != 'function' && typeof (value + '') == 'string';\n  }\n\n  /**\n   * A no-operation function.\n   *\n   * @private\n   */\n  function noop() {\n    // no operation performed\n  }\n\n  /**\n   * Slices the `collection` from the `start` index up to, but not including,\n   * the `end` index.\n   *\n   * Note: This function is used, instead of `Array#slice`, to support node lists\n   * in IE < 9 and to ensure dense arrays are returned.\n   *\n   * @private\n   * @param {Array|Object|String} collection The collection to slice.\n   * @param {Number} start The start index.\n   * @param {Number} end The end index.\n   * @returns {Array} Returns the new array.\n   */\n  function slice(array, start, end) {\n    start || (start = 0);\n    if (typeof end == 'undefined') {\n      end = array ? array.length : 0;\n    }\n    var index = -1,\n        length = end - start || 0,\n        result = Array(length < 0 ? 0 : length);\n\n    while (++index < length) {\n      result[index] = array[start + index];\n    }\n    return result;\n  }\n\n  /**\n   * Used by `unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {String} match The matched character to unescape.\n   * @returns {String} Returns the unescaped character.\n   */\n  function unescapeHtmlChar(match) {\n    return htmlUnescapes[match];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an `arguments` object, else `false`.\n   * @example\n   *\n   * (function() { return _.isArguments(arguments); })(1, 2, 3);\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    return toString.call(value) == argsClass;\n  }\n\n  /**\n   * Iterates over `object`'s own and inherited enumerable properties, executing\n   * the `callback` for each property. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, key, object). Callbacks may exit iteration\n   * early by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * function Dog(name) {\n   *   this.name = name;\n   * }\n   *\n   * Dog.prototype.bark = function() {\n   *   alert('Woof, woof!');\n   * };\n   *\n   * _.forIn(new Dog('Dagny'), function(value, key) {\n   *   alert(key);\n   * });\n   * // => alerts 'name' and 'bark' (order is not guaranteed)\n   */\n  var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {\n    'useHas': false\n  });\n\n  /**\n   * Iterates over an object's own enumerable properties, executing the `callback`\n   * for each property. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, key, object). Callbacks may exit iteration early by explicitly\n   * returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The object to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n   *   alert(key);\n   * });\n   * // => alerts '0', '1', and 'length' (order is not guaranteed)\n   */\n  var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);\n\n  /**\n   * Checks if `value` is an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an array, else `false`.\n   * @example\n   *\n   * (function() { return _.isArray(arguments); })();\n   * // => false\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   */\n  var isArray = nativeIsArray || function(value) {\n    // `instanceof` may cause a memory leak in IE 7 if `value` is a host object\n    // http://ajaxian.com/archives/working-aroung-the-instanceof-memory-leak\n    return value instanceof Array || toString.call(value) == arrayClass;\n  };\n\n  /**\n   * Creates an array composed of the own enumerable property names of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   * @example\n   *\n   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => ['one', 'two', 'three'] (order is not guaranteed)\n   */\n  var keys = !nativeKeys ? shimKeys : function(object) {\n    if (!isObject(object)) {\n      return [];\n    }\n    return nativeKeys(object);\n  };\n\n  /**\n   * A fallback implementation of `isPlainObject` that checks if a given `value`\n   * is an object created by the `Object` constructor, assuming objects created\n   * by the `Object` constructor have no inherited enumerable properties and that\n   * there are no `Object.prototype` extensions.\n   *\n   * @private\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   */\n  function shimIsPlainObject(value) {\n    // avoid non-objects and false positives for `arguments` objects\n    var result = false;\n    if (!(value && typeof value == 'object') || isArguments(value)) {\n      return result;\n    }\n    // check that the constructor is `Object` (i.e. `Object instanceof Object`)\n    var ctor = value.constructor;\n    if ((!isFunction(ctor)) || ctor instanceof ctor) {\n      // In most environments an object's own properties are iterated before\n      // its inherited properties. If the last iterated property is an object's\n      // own property then there are no inherited enumerable properties.\n      forIn(value, function(value, key) {\n        result = key;\n      });\n      return result === false || hasOwnProperty.call(value, result);\n    }\n    return result;\n  }\n\n  /**\n   * A fallback implementation of `Object.keys` that produces an array of the\n   * given object's own enumerable property names.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names.\n   */\n  function shimKeys(object) {\n    var result = [];\n    forOwn(object, function(value, key) {\n      result.push(key);\n    });\n    return result;\n  }\n\n  /**\n   * Used to convert characters to HTML entities:\n   *\n   * Though the `>` character is escaped for symmetry, characters like `>` and `/`\n   * don't require escaping in HTML and have no special meaning unless they're part\n   * of a tag or an unquoted attribute value.\n   * http://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")\n   */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to convert HTML entities to characters */\n  var htmlUnescapes = invert(htmlEscapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object. Subsequent sources will overwrite propery assignments of previous\n   * sources. If a `callback` function is passed, it will be executed to produce\n   * the assigned values. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @alias extend\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize assigning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * _.assign({ 'name': 'moe' }, { 'age': 40 });\n   * // => { 'name': 'moe', 'age': 40 }\n   *\n   * var defaults = _.partialRight(_.assign, function(a, b) {\n   *   return typeof a == 'undefined' ? b : a;\n   * });\n   *\n   * var food = { 'name': 'apple' };\n   * defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var assign = createIterator(defaultsIteratorOptions, {\n    'top':\n      defaultsIteratorOptions.top.replace(';',\n        ';\\n' +\n        \"if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\\n\" +\n        '  var callback = createCallback(args[--argsLength - 1], args[argsLength--], 2);\\n' +\n        \"} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\\n\" +\n        '  callback = args[--argsLength];\\n' +\n        '}'\n      ),\n    'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'\n  });\n\n  /**\n   * Creates a clone of `value`. If `deep` is `true`, nested objects will also\n   * be cloned, otherwise they will be assigned by reference. If a `callback`\n   * function is passed, it will be executed to produce the cloned values. If\n   * `callback` returns `undefined`, cloning will be handled by the method instead.\n   * The `callback` is bound to `thisArg` and invoked with one argument; (value).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to clone.\n   * @param {Boolean} [deep=false] A flag to indicate a deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate clones with source counterparts.\n   * @returns {Mixed} Returns the cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var shallow = _.clone(stooges);\n   * shallow[0] === stooges[0];\n   * // => true\n   *\n   * var deep = _.clone(stooges, true);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * _.mixin({\n   *   'clone': _.partialRight(_.clone, function(value) {\n   *     return _.isElement(value) ? value.cloneNode(false) : undefined;\n   *   })\n   * });\n   *\n   * var clone = _.clone(document.body);\n   * clone.childNodes.length;\n   * // => 0\n   */\n  function clone(value, deep, callback, thisArg, stackA, stackB) {\n    var result = value;\n\n    // allows working with \"Collections\" methods without using their `callback`\n    // argument, `index|key`, for this method's `callback`\n    if (typeof deep == 'function') {\n      thisArg = callback;\n      callback = deep;\n      deep = false;\n    }\n    if (typeof callback == 'function') {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 1);\n      result = callback(result);\n\n      var done = typeof result != 'undefined';\n      if (!done) {\n        result = value;\n      }\n    }\n    // inspect [[Class]]\n    var isObj = isObject(result);\n    if (isObj) {\n      var className = toString.call(result);\n      if (!cloneableClasses[className]) {\n        return result;\n      }\n      var isArr = isArray(result);\n    }\n    // shallow clone\n    if (!isObj || !deep) {\n      return isObj && !done\n        ? (isArr ? slice(result) : assign({}, result))\n        : result;\n    }\n    var ctor = ctorByClass[className];\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        return done ? result : new ctor(+result);\n\n      case numberClass:\n      case stringClass:\n        return done ? result : new ctor(result);\n\n      case regexpClass:\n        return done ? result : ctor(result.source, reFlags.exec(result));\n    }\n    // check for circular references and return corresponding clone\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == value) {\n        return stackB[length];\n      }\n    }\n    // init cloned object\n    if (!done) {\n      result = isArr ? ctor(result.length) : {};\n\n      // add array properties assigned by `RegExp#exec`\n      if (isArr) {\n        if (hasOwnProperty.call(value, 'index')) {\n          result.index = value.index;\n        }\n        if (hasOwnProperty.call(value, 'input')) {\n          result.input = value.input;\n        }\n      }\n    }\n    // add the source value to the stack of traversed objects\n    // and associate it with its clone\n    stackA.push(value);\n    stackB.push(result);\n\n    // recursively populate clone (susceptible to call stack limits)\n    (isArr ? forEach : forOwn)(done ? result : value, function(objValue, key) {\n      result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);\n    });\n\n    return result;\n  }\n\n  /**\n   * Creates a deep clone of `value`. If a `callback` function is passed, it will\n   * be executed to produce the cloned values. If `callback` returns the value it\n   * was passed, cloning will be handled by the method instead. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * Note: This function is loosely based on the structured clone algorithm. Functions\n   * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and\n   * objects created by constructors other than `Object` are cloned to plain `Object` objects.\n   * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to deep clone.\n   * @param {Function} [callback] The function to customize cloning values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the deep cloned `value`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * var deep = _.cloneDeep(stooges);\n   * deep[0] === stooges[0];\n   * // => false\n   *\n   * var view = {\n   *   'label': 'docs',\n   *   'node': element\n   * };\n   *\n   * var clone = _.cloneDeep(view, function(value) {\n   *   return _.isElement(value) ? value.cloneNode(true) : value;\n   * });\n   *\n   * clone.node == view.node;\n   * // => false\n   */\n  function cloneDeep(value, callback, thisArg) {\n    return clone(value, true, callback, thisArg);\n  }\n\n  /**\n   * Assigns own enumerable properties of source object(s) to the destination\n   * object for all destination properties that resolve to `undefined`. Once a\n   * property is set, additional defaults of the same property will be ignored.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param- {Object} [guard] Internally used to allow working with `_.reduce`\n   *  without using its callback's `key` and `object` arguments as sources.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var food = { 'name': 'apple' };\n   * _.defaults(food, { 'name': 'banana', 'type': 'fruit' });\n   * // => { 'name': 'apple', 'type': 'fruit' }\n   */\n  var defaults = createIterator(defaultsIteratorOptions);\n\n  /**\n   * Creates a sorted array of all enumerable properties, own and inherited,\n   * of `object` that have function values.\n   *\n   * @static\n   * @memberOf _\n   * @alias methods\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property names that have function values.\n   * @example\n   *\n   * _.functions(_);\n   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]\n   */\n  function functions(object) {\n    var result = [];\n    forIn(object, function(value, key) {\n      if (isFunction(value)) {\n        result.push(key);\n      }\n    });\n    return result.sort();\n  }\n\n  /**\n   * Checks if the specified object `property` exists and is a direct property,\n   * instead of an inherited property.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to check.\n   * @param {String} property The property to check for.\n   * @returns {Boolean} Returns `true` if key is a direct property, else `false`.\n   * @example\n   *\n   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n   * // => true\n   */\n  function has(object, property) {\n    return object ? hasOwnProperty.call(object, property) : false;\n  }\n\n  /**\n   * Creates an object composed of the inverted keys and values of the given `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to invert.\n   * @returns {Object} Returns the created inverted object.\n   * @example\n   *\n   *  _.invert({ 'first': 'moe', 'second': 'larry' });\n   * // => { 'moe': 'first', 'larry': 'second' } (order is not guaranteed)\n   */\n  function invert(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = {};\n\n    while (++index < length) {\n      var key = props[index];\n      result[object[key]] = key;\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is a boolean value.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a boolean value, else `false`.\n   * @example\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean(value) {\n    return value === true || value === false || toString.call(value) == boolClass;\n  }\n\n  /**\n   * Checks if `value` is a date.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a date, else `false`.\n   * @example\n   *\n   * _.isDate(new Date);\n   * // => true\n   */\n  function isDate(value) {\n    return value instanceof Date || toString.call(value) == dateClass;\n  }\n\n  /**\n   * Checks if `value` is a DOM element.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a DOM element, else `false`.\n   * @example\n   *\n   * _.isElement(document.body);\n   * // => true\n   */\n  function isElement(value) {\n    return value ? value.nodeType === 1 : false;\n  }\n\n  /**\n   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n   * length of `0` and objects with no own enumerable properties are considered\n   * \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Array|Object|String} value The value to inspect.\n   * @returns {Boolean} Returns `true`, if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({});\n   * // => true\n   *\n   * _.isEmpty('');\n   * // => true\n   */\n  function isEmpty(value) {\n    var result = true;\n    if (!value) {\n      return result;\n    }\n    var className = toString.call(value),\n        length = value.length;\n\n    if ((className == arrayClass || className == stringClass ||\n        className == argsClass) ||\n        (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {\n      return !length;\n    }\n    forOwn(value, function() {\n      return (result = false);\n    });\n    return result;\n  }\n\n  /**\n   * Performs a deep comparison between two values to determine if they are\n   * equivalent to each other. If `callback` is passed, it will be executed to\n   * compare values. If `callback` returns `undefined`, comparisons will be handled\n   * by the method instead. The `callback` is bound to `thisArg` and invoked with\n   * two arguments; (a, b).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} a The value to compare.\n   * @param {Mixed} b The other value to compare.\n   * @param {Function} [callback] The function to customize comparing values.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [stackA=[]] Internally used track traversed `a` objects.\n   * @param- {Object} [stackB=[]] Internally used track traversed `b` objects.\n   * @returns {Boolean} Returns `true`, if the values are equvalent, else `false`.\n   * @example\n   *\n   * var moe = { 'name': 'moe', 'age': 40 };\n   * var copy = { 'name': 'moe', 'age': 40 };\n   *\n   * moe == copy;\n   * // => false\n   *\n   * _.isEqual(moe, copy);\n   * // => true\n   *\n   * var words = ['hello', 'goodbye'];\n   * var otherWords = ['hi', 'goodbye'];\n   *\n   * _.isEqual(words, otherWords, function(a, b) {\n   *   var reGreet = /^(?:hello|hi)$/i,\n   *       aGreet = _.isString(a) && reGreet.test(a),\n   *       bGreet = _.isString(b) && reGreet.test(b);\n   *\n   *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;\n   * });\n   * // => true\n   */\n  function isEqual(a, b, callback, thisArg, stackA, stackB) {\n    // used to indicate that when comparing objects, `a` has at least the properties of `b`\n    var whereIndicator = callback === indicatorObject;\n    if (callback && !whereIndicator) {\n      callback = typeof thisArg == 'undefined' ? callback : createCallback(callback, thisArg, 2);\n      var result = callback(a, b);\n      if (typeof result != 'undefined') {\n        return !!result;\n      }\n    }\n    // exit early for identical values\n    if (a === b) {\n      // treat `+0` vs. `-0` as not equal\n      return a !== 0 || (1 / a == 1 / b);\n    }\n    var type = typeof a,\n        otherType = typeof b;\n\n    // exit early for unlike primitive values\n    if (a === a &&\n        (!a || (type != 'function' && type != 'object')) &&\n        (!b || (otherType != 'function' && otherType != 'object'))) {\n      return false;\n    }\n    // exit early for `null` and `undefined`, avoiding ES3's Function#call behavior\n    // http://es5.github.com/#x15.3.4.4\n    if (a == null || b == null) {\n      return a === b;\n    }\n    // compare [[Class]] names\n    var className = toString.call(a),\n        otherClass = toString.call(b);\n\n    if (className == argsClass) {\n      className = objectClass;\n    }\n    if (otherClass == argsClass) {\n      otherClass = objectClass;\n    }\n    if (className != otherClass) {\n      return false;\n    }\n    switch (className) {\n      case boolClass:\n      case dateClass:\n        // coerce dates and booleans to numbers, dates to milliseconds and booleans\n        // to `1` or `0`, treating invalid dates coerced to `NaN` as not equal\n        return +a == +b;\n\n      case numberClass:\n        // treat `NaN` vs. `NaN` as equal\n        return a != +a\n          ? b != +b\n          // but treat `+0` vs. `-0` as not equal\n          : (a == 0 ? (1 / a == 1 / b) : a == +b);\n\n      case regexpClass:\n      case stringClass:\n        // coerce regexes to strings (http://es5.github.com/#x15.10.6.4)\n        // treat string primitives and their corresponding object instances as equal\n        return a == b + '';\n    }\n    var isArr = className == arrayClass;\n    if (!isArr) {\n      // unwrap any `lodash` wrapped values\n      if (a.__wrapped__ || b.__wrapped__) {\n        return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);\n      }\n      // exit for functions and DOM nodes\n      if (className != objectClass) {\n        return false;\n      }\n      // in older versions of Opera, `arguments` objects have `Array` constructors\n      var ctorA = a.constructor,\n          ctorB = b.constructor;\n\n      // non `Object` object instances with different constructors are not equal\n      if (ctorA != ctorB && !(\n            isFunction(ctorA) && ctorA instanceof ctorA &&\n            isFunction(ctorB) && ctorB instanceof ctorB\n          )) {\n        return false;\n      }\n    }\n    // assume cyclic structures are equal\n    // the algorithm for detecting cyclic structures is adapted from ES 5.1\n    // section 15.12.3, abstract operation `JO` (http://es5.github.com/#x15.12.3)\n    stackA || (stackA = []);\n    stackB || (stackB = []);\n\n    var length = stackA.length;\n    while (length--) {\n      if (stackA[length] == a) {\n        return stackB[length] == b;\n      }\n    }\n    var size = 0;\n    result = true;\n\n    // add `a` and `b` to the stack of traversed objects\n    stackA.push(a);\n    stackB.push(b);\n\n    // recursively compare objects and arrays (susceptible to call stack limits)\n    if (isArr) {\n      length = a.length;\n      size = b.length;\n\n      // compare lengths to determine if a deep comparison is necessary\n      result = size == a.length;\n      if (!result && !whereIndicator) {\n        return result;\n      }\n      // deep compare the contents, ignoring non-numeric properties\n      while (size--) {\n        var index = length,\n            value = b[size];\n\n        if (whereIndicator) {\n          while (index--) {\n            if ((result = isEqual(a[index], value, callback, thisArg, stackA, stackB))) {\n              break;\n            }\n          }\n        } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {\n          break;\n        }\n      }\n      return result;\n    }\n    // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`\n    // which, in this case, is more costly\n    forIn(b, function(value, key, b) {\n      if (hasOwnProperty.call(b, key)) {\n        // count the number of properties.\n        size++;\n        // deep compare each property value.\n        return (result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB));\n      }\n    });\n\n    if (result && !whereIndicator) {\n      // ensure both objects have the same number of properties\n      forIn(a, function(value, key, a) {\n        if (hasOwnProperty.call(a, key)) {\n          // `size` will be `-1` if `a` has more properties than `b`\n          return (result = --size > -1);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is, or can be coerced to, a finite number.\n   *\n   * Note: This is not the same as native `isFinite`, which will return true for\n   * booleans and empty strings. See http://es5.github.com/#x15.1.2.5.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is finite, else `false`.\n   * @example\n   *\n   * _.isFinite(-101);\n   * // => true\n   *\n   * _.isFinite('10');\n   * // => true\n   *\n   * _.isFinite(true);\n   * // => false\n   *\n   * _.isFinite('');\n   * // => false\n   *\n   * _.isFinite(Infinity);\n   * // => false\n   */\n  function isFinite(value) {\n    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));\n  }\n\n  /**\n   * Checks if `value` is a function.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   */\n  function isFunction(value) {\n    return typeof value == 'function';\n  }\n  // fallback for older versions of Chrome and Safari\n  if (isFunction(/x/)) {\n    isFunction = function(value) {\n      return value instanceof Function || toString.call(value) == funcClass;\n    };\n  }\n\n  /**\n   * Checks if `value` is the language type of Object.\n   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(1);\n   * // => false\n   */\n  function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.com/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return value ? objectTypes[typeof value] : false;\n  }\n\n  /**\n   * Checks if `value` is `NaN`.\n   *\n   * Note: This is not the same as native `isNaN`, which will return `true` for\n   * `undefined` and other values. See http://es5.github.com/#x15.1.2.4.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `NaN`, else `false`.\n   * @example\n   *\n   * _.isNaN(NaN);\n   * // => true\n   *\n   * _.isNaN(new Number(NaN));\n   * // => true\n   *\n   * isNaN(undefined);\n   * // => true\n   *\n   * _.isNaN(undefined);\n   * // => false\n   */\n  function isNaN(value) {\n    // `NaN` as a primitive is the only value that is not equal to itself\n    // (perform the [[Class]] check first to avoid errors with some host objects in IE)\n    return isNumber(value) && value != +value\n  }\n\n  /**\n   * Checks if `value` is `null`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `null`, else `false`.\n   * @example\n   *\n   * _.isNull(null);\n   * // => true\n   *\n   * _.isNull(undefined);\n   * // => false\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Checks if `value` is a number.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a number, else `false`.\n   * @example\n   *\n   * _.isNumber(8.4 * 5);\n   * // => true\n   */\n  function isNumber(value) {\n    return typeof value == 'number' || toString.call(value) == numberClass;\n  }\n\n  /**\n   * Checks if a given `value` is an object created by the `Object` constructor.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Stooge(name, age) {\n   *   this.name = name;\n   *   this.age = age;\n   * }\n   *\n   * _.isPlainObject(new Stooge('moe', 40));\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'name': 'moe', 'age': 40 });\n   * // => true\n   */\n  var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {\n    if (!(value && typeof value == 'object')) {\n      return false;\n    }\n    var valueOf = value.valueOf,\n        objProto = typeof valueOf == 'function' && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);\n\n    return objProto\n      ? value == objProto || (getPrototypeOf(value) == objProto && !isArguments(value))\n      : shimIsPlainObject(value);\n  };\n\n  /**\n   * Checks if `value` is a regular expression.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a regular expression, else `false`.\n   * @example\n   *\n   * _.isRegExp(/moe/);\n   * // => true\n   */\n  function isRegExp(value) {\n    return value instanceof RegExp || toString.call(value) == regexpClass;\n  }\n\n  /**\n   * Checks if `value` is a string.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('moe');\n   * // => true\n   */\n  function isString(value) {\n    return typeof value == 'string' || toString.call(value) == stringClass;\n  }\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Mixed} value The value to check.\n   * @returns {Boolean} Returns `true`, if the `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   */\n  function isUndefined(value) {\n    return typeof value == 'undefined';\n  }\n\n  /**\n   * Recursively merges own enumerable properties of the source object(s), that\n   * don't resolve to `undefined`, into the destination object. Subsequent sources\n   * will overwrite propery assignments of previous sources. If a `callback` function\n   * is passed, it will be executed to produce the merged values of the destination\n   * and source properties. If `callback` returns `undefined`, merging will be\n   * handled by the method instead. The `callback` is bound to `thisArg` and\n   * invoked with two arguments; (objectValue, sourceValue).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The destination object.\n   * @param {Object} [source1, source2, ...] The source objects.\n   * @param {Function} [callback] The function to customize merging properties.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @param- {Object} [deepIndicator] Internally used to indicate that `stackA`\n   *  and `stackB` are arrays of traversed objects instead of source objects.\n   * @param- {Array} [stackA=[]] Internally used to track traversed source objects.\n   * @param- {Array} [stackB=[]] Internally used to associate values with their\n   *  source counterparts.\n   * @returns {Object} Returns the destination object.\n   * @example\n   *\n   * var names = {\n   *   'stooges': [\n   *     { 'name': 'moe' },\n   *     { 'name': 'larry' }\n   *   ]\n   * };\n   *\n   * var ages = {\n   *   'stooges': [\n   *     { 'age': 40 },\n   *     { 'age': 50 }\n   *   ]\n   * };\n   *\n   * _.merge(names, ages);\n   * // => { 'stooges': [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }] }\n   *\n   * var food = {\n   *   'fruits': ['apple'],\n   *   'vegetables': ['beet']\n   * };\n   *\n   * var otherFood = {\n   *   'fruits': ['banana'],\n   *   'vegetables': ['carrot']\n   * };\n   *\n   * _.merge(food, otherFood, function(a, b) {\n   *   return _.isArray(a) ? a.concat(b) : undefined;\n   * });\n   * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }\n   */\n  function merge(object, source, deepIndicator) {\n    var args = arguments,\n        index = 0,\n        length = 2;\n\n    if (!isObject(object)) {\n      return object;\n    }\n    if (deepIndicator === indicatorObject) {\n      var callback = args[3],\n          stackA = args[4],\n          stackB = args[5];\n    } else {\n      stackA = [];\n      stackB = [];\n\n      // allows working with `_.reduce` and `_.reduceRight` without\n      // using their `callback` arguments, `index|key` and `collection`\n      if (typeof deepIndicator != 'number') {\n        length = args.length;\n      }\n      if (length > 3 && typeof args[length - 2] == 'function') {\n        callback = createCallback(args[--length - 1], args[length--], 2);\n      } else if (length > 2 && typeof args[length - 1] == 'function') {\n        callback = args[--length];\n      }\n    }\n    while (++index < length) {\n      (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {\n        var found,\n            isArr,\n            result = source,\n            value = object[key];\n\n        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {\n          // avoid merging previously merged cyclic sources\n          var stackLength = stackA.length;\n          while (stackLength--) {\n            if ((found = stackA[stackLength] == source)) {\n              value = stackB[stackLength];\n              break;\n            }\n          }\n          if (!found) {\n            value = isArr\n              ? (isArray(value) ? value : [])\n              : (isPlainObject(value) ? value : {});\n\n            if (callback) {\n              result = callback(value, source);\n              if (typeof result != 'undefined') {\n                value = result;\n              }\n            }\n            // add `source` and associated `value` to the stack of traversed objects\n            stackA.push(source);\n            stackB.push(value);\n\n            // recursively merge objects and arrays (susceptible to call stack limits)\n            if (!callback) {\n              value = merge(value, source, indicatorObject, callback, stackA, stackB);\n            }\n          }\n        }\n        else {\n          if (callback) {\n            result = callback(value, source);\n            if (typeof result == 'undefined') {\n              result = source;\n            }\n          }\n          if (typeof result != 'undefined') {\n            value = result;\n          }\n        }\n        object[key] = value;\n      });\n    }\n    return object;\n  }\n\n  /**\n   * Creates a shallow clone of `object` excluding the specified properties.\n   * Property names may be specified as individual arguments or as arrays of\n   * property names. If a `callback` function is passed, it will be executed\n   * for each property in the `object`, omitting the properties `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked\n   * with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Function|String} callback|[prop1, prop2, ...] The properties to omit\n   *  or the function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object without the omitted properties.\n   * @example\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, 'age');\n   * // => { 'name': 'moe' }\n   *\n   * _.omit({ 'name': 'moe', 'age': 40 }, function(value) {\n   *   return typeof value == 'number';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function omit(object, callback, thisArg) {\n    var isFunc = typeof callback == 'function',\n        result = {};\n\n    if (isFunc) {\n      callback = createCallback(callback, thisArg);\n    } else {\n      var props = concat.apply(arrayRef, arguments);\n    }\n    forIn(object, function(value, key, object) {\n      if (isFunc\n            ? !callback(value, key, object)\n            : indexOf(props, key, 1) < 0\n          ) {\n        result[key] = value;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Creates a two dimensional array of the given object's key-value pairs,\n   * i.e. `[[key1, value1], [key2, value2]]`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns new array of key-value pairs.\n   * @example\n   *\n   * _.pairs({ 'moe': 30, 'larry': 40 });\n   * // => [['moe', 30], ['larry', 40]] (order is not guaranteed)\n   */\n  function pairs(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      var key = props[index];\n      result[index] = [key, object[key]];\n    }\n    return result;\n  }\n\n  /**\n   * Creates a shallow clone of `object` composed of the specified properties.\n   * Property names may be specified as individual arguments or as arrays of property\n   * names. If `callback` is passed, it will be executed for each property in the\n   * `object`, picking the properties `callback` returns truthy for. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, key, object).\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The source object.\n   * @param {Array|Function|String} callback|[prop1, prop2, ...] The function called\n   *  per iteration or properties to pick, either as individual arguments or arrays.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns an object composed of the picked properties.\n   * @example\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, 'name');\n   * // => { 'name': 'moe' }\n   *\n   * _.pick({ 'name': 'moe', '_userid': 'moe1' }, function(value, key) {\n   *   return key.charAt(0) != '_';\n   * });\n   * // => { 'name': 'moe' }\n   */\n  function pick(object, callback, thisArg) {\n    var result = {};\n    if (typeof callback != 'function') {\n      var index = 0,\n          props = concat.apply(arrayRef, arguments),\n          length = isObject(object) ? props.length : 0;\n\n      while (++index < length) {\n        var key = props[index];\n        if (key in object) {\n          result[key] = object[key];\n        }\n      }\n    } else {\n      callback = createCallback(callback, thisArg);\n      forIn(object, function(value, key, object) {\n        if (callback(value, key, object)) {\n          result[key] = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array composed of the own enumerable property values of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Object} object The object to inspect.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * _.values({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => [1, 2, 3]\n   */\n  function values(object) {\n    var index = -1,\n        props = keys(object),\n        length = props.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = object[props[index]];\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array of elements from the specified indexes, or keys, of the\n   * `collection`. Indexes may be specified as individual arguments or as arrays\n   * of indexes.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Array|Number|String} [index1, index2, ...] The indexes of\n   *  `collection` to retrieve, either as individual arguments or arrays.\n   * @returns {Array} Returns a new array of elements corresponding to the\n   *  provided indexes.\n   * @example\n   *\n   * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);\n   * // => ['a', 'c', 'e']\n   *\n   * _.at(['moe', 'larry', 'curly'], 0, 2);\n   * // => ['moe', 'curly']\n   */\n  function at(collection) {\n    var index = -1,\n        props = concat.apply(arrayRef, slice(arguments, 1)),\n        length = props.length,\n        result = Array(length);\n\n    while(++index < length) {\n      result[index] = collection[props[index]];\n    }\n    return result;\n  }\n\n  /**\n   * Checks if a given `target` element is present in a `collection` using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @alias include\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Mixed} target The value to check for.\n   * @param {Number} [fromIndex=0] The index to search from.\n   * @returns {Boolean} Returns `true` if the `target` element is found, else `false`.\n   * @example\n   *\n   * _.contains([1, 2, 3], 1);\n   * // => true\n   *\n   * _.contains([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n   * // => true\n   *\n   * _.contains('curly', 'ur');\n   * // => true\n   */\n  function contains(collection, target, fromIndex) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = false;\n\n    fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;\n    if (typeof length == 'number') {\n      result = (isString(collection)\n        ? collection.indexOf(target, fromIndex)\n        : indexOf(collection, target, fromIndex)\n      ) > -1;\n    } else {\n      each(collection, function(value) {\n        if (++index >= fromIndex) {\n          return !(result = value === target);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the given `callback`. The corresponding value of each key\n   * is the number of times the key was returned by the `callback`. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': 1, '6': 2 }\n   *\n   * _.countBy(['one', 'two', 'three'], 'length');\n   * // => { '3': 2, '5': 1 }\n   */\n  function countBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);\n    });\n    return result;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **all** elements of a\n   * `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias all\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if all elements pass the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.every(stooges, 'age');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.every(stooges, { 'age': 50 });\n   * // => false\n   */\n  function every(collection, callback, thisArg) {\n    var result = true;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (!(result = !!callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return (result = !!callback(value, index, collection));\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * the `callback` returns truthy for. The `callback` is bound to `thisArg` and\n   * invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias select\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that passed the callback check.\n   * @example\n   *\n   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [2, 4, 6]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.filter(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.filter(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   */\n  function filter(collection, callback, thisArg) {\n    var result = [];\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        if (callback(value, index, collection)) {\n          result.push(value);\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Examines each element in a `collection`, returning the first that the `callback`\n   * returns truthy for. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias detect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the element that passed the callback check,\n   *  else `undefined`.\n   * @example\n   *\n   * var even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => 2\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },\n   *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * var veggie = _.find(food, { 'type': 'vegetable' });\n   * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * var healthy = _.find(food, 'organic');\n   * // => { 'name': 'banana', 'organic': true, 'type': 'fruit' }\n   */\n  function find(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, index, collection) {\n      if (callback(value, index, collection)) {\n        result = value;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Iterates over a `collection`, executing the `callback` for each element in\n   * the `collection`. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection). Callbacks may exit iteration early\n   * by explicitly returning `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias each\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array|Object|String} Returns `collection`.\n   * @example\n   *\n   * _([1, 2, 3]).forEach(alert).join(',');\n   * // => alerts each number and returns '1,2,3'\n   *\n   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n   * // => alerts each number value (order is not guaranteed)\n   */\n  function forEach(collection, callback, thisArg) {\n    if (callback && typeof thisArg == 'undefined' && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if (callback(collection[index], index, collection) === false) {\n          break;\n        }\n      }\n    } else {\n      each(collection, callback, thisArg);\n    }\n    return collection;\n  }\n\n  /**\n   * Creates an object composed of keys returned from running each element of the\n   * `collection` through the `callback`. The corresponding value of each key is\n   * an array of elements passed to `callback` that returned the key. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n   * // => { '4': [4.2], '6': [6.1, 6.4] }\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  function groupBy(collection, callback, thisArg) {\n    var result = {};\n    callback = createCallback(callback, thisArg);\n\n    forEach(collection, function(value, key, collection) {\n      key = callback(value, key, collection) + '';\n      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Invokes the method named by `methodName` on each element in the `collection`,\n   * returning an array of the results of each invoked method. Additional arguments\n   * will be passed to each invoked method. If `methodName` is a function, it will\n   * be invoked for, and `this` bound to, each element in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|String} methodName The name of the method to invoke or\n   *  the function invoked per iteration.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the method with.\n   * @returns {Array} Returns a new array of the results of each invoked method.\n   * @example\n   *\n   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n   * // => [[1, 5, 7], [1, 2, 3]]\n   *\n   * _.invoke([123, 456], String.prototype.split, '');\n   * // => [['1', '2', '3'], ['4', '5', '6']]\n   */\n  function invoke(collection, methodName) {\n    var args = slice(arguments, 2),\n        index = -1,\n        isFunc = typeof methodName == 'function',\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);\n    });\n    return result;\n  }\n\n  /**\n   * Creates an array of values by running each element in the `collection`\n   * through the `callback`. The `callback` is bound to `thisArg` and invoked with\n   * three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias collect\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * _.map([1, 2, 3], function(num) { return num * 3; });\n   * // => [3, 6, 9]\n   *\n   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n   * // => [3, 6, 9] (order is not guaranteed)\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.map(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  function map(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    if (isArray(collection)) {\n      while (++index < length) {\n        result[index] = callback(collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, key, collection) {\n        result[++index] = callback(value, key, collection);\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the maximum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the maximum value.\n   * @example\n   *\n   * _.max([4, 2, 8, 6]);\n   * // => 8\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.max(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'larry', 'age': 50 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.max(stooges, 'age');\n   * // => { 'name': 'larry', 'age': 50 };\n   */\n  function max(collection, callback, thisArg) {\n    var computed = -Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current > computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the minimum value of an `array`. If `callback` is passed,\n   * it will be executed for each value in the `array` to generate the\n   * criterion by which the value is ranked. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the minimum value.\n   * @example\n   *\n   * _.min([4, 2, 8, 6]);\n   * // => 2\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.min(stooges, function(stooge) { return stooge.age; });\n   * // => { 'name': 'moe', 'age': 40 };\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.min(stooges, 'age');\n   * // => { 'name': 'moe', 'age': 40 };\n   */\n  function min(collection, callback, thisArg) {\n    var computed = Infinity,\n        result = computed;\n\n    if (!callback && isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      callback = !callback && isString(collection)\n        ? charAtCallback\n        : createCallback(callback, thisArg);\n\n      each(collection, function(value, index, collection) {\n        var current = callback(value, index, collection);\n        if (current < computed) {\n          computed = current;\n          result = value;\n        }\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Retrieves the value of a specified property from all elements in the `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {String} property The property to pluck.\n   * @returns {Array} Returns a new array of property values.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.pluck(stooges, 'name');\n   * // => ['moe', 'larry']\n   */\n  var pluck = map;\n\n  /**\n   * Reduces a `collection` to a value that is the accumulated result of running\n   * each element in the `collection` through the `callback`, where each successive\n   * `callback` execution consumes the return value of the previous execution.\n   * If `accumulator` is not passed, the first element of the `collection` will be\n   * used as the initial `accumulator` value. The `callback` is bound to `thisArg`\n   * and invoked with four arguments; (accumulator, value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @alias foldl, inject\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var sum = _.reduce([1, 2, 3], function(sum, num) {\n   *   return sum + num;\n   * });\n   * // => 6\n   *\n   * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {\n   *   result[key] = num * 3;\n   *   return result;\n   * }, {});\n   * // => { 'a': 3, 'b': 6, 'c': 9 }\n   */\n  function reduce(collection, callback, accumulator, thisArg) {\n    var noaccum = arguments.length < 3;\n    callback = createCallback(callback, thisArg, 4);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      if (noaccum) {\n        accumulator = collection[++index];\n      }\n      while (++index < length) {\n        accumulator = callback(accumulator, collection[index], index, collection);\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        accumulator = noaccum\n          ? (noaccum = false, value)\n          : callback(accumulator, value, index, collection)\n      });\n    }\n    return accumulator;\n  }\n\n  /**\n   * This method is similar to `_.reduce`, except that it iterates over a\n   * `collection` from right to left.\n   *\n   * @static\n   * @memberOf _\n   * @alias foldr\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function} [callback=identity] The function called per iteration.\n   * @param {Mixed} [accumulator] Initial value of the accumulator.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the accumulated value.\n   * @example\n   *\n   * var list = [[0, 1], [2, 3], [4, 5]];\n   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n   * // => [4, 5, 2, 3, 0, 1]\n   */\n  function reduceRight(collection, callback, accumulator, thisArg) {\n    var iterable = collection,\n        length = collection ? collection.length : 0,\n        noaccum = arguments.length < 3;\n\n    if (typeof length != 'number') {\n      var props = keys(collection);\n      length = props.length;\n    }\n    callback = createCallback(callback, thisArg, 4);\n    forEach(collection, function(value, index, collection) {\n      index = props ? props[--length] : --length;\n      accumulator = noaccum\n        ? (noaccum = false, iterable[index])\n        : callback(accumulator, iterable[index], index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The opposite of `_.filter`, this method returns the elements of a\n   * `collection` that `callback` does **not** return truthy for.\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of elements that did **not** pass the\n   *  callback check.\n   * @example\n   *\n   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n   * // => [1, 3, 5]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.reject(food, 'organic');\n   * // => [{ 'name': 'apple', 'organic': false, 'type': 'fruit' }]\n   *\n   * // using \"_.where\" callback shorthand\n   * _.reject(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'carrot', 'organic': true, 'type': 'vegetable' }]\n   */\n  function reject(collection, callback, thisArg) {\n    callback = createCallback(callback, thisArg);\n    return filter(collection, function(value, index, collection) {\n      return !callback(value, index, collection);\n    });\n  }\n\n  /**\n   * Creates an array of shuffled `array` values, using a version of the\n   * Fisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to shuffle.\n   * @returns {Array} Returns a new shuffled collection.\n   * @example\n   *\n   * _.shuffle([1, 2, 3, 4, 5, 6]);\n   * // => [4, 1, 6, 3, 5, 2]\n   */\n  function shuffle(collection) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    forEach(collection, function(value) {\n      var rand = floor(nativeRandom() * (++index + 1));\n      result[index] = result[rand];\n      result[rand] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Gets the size of the `collection` by returning `collection.length` for arrays\n   * and array-like objects or the number of own enumerable properties for objects.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to inspect.\n   * @returns {Number} Returns `collection.length` or number of own enumerable properties.\n   * @example\n   *\n   * _.size([1, 2]);\n   * // => 2\n   *\n   * _.size({ 'one': 1, 'two': 2, 'three': 3 });\n   * // => 3\n   *\n   * _.size('curly');\n   * // => 5\n   */\n  function size(collection) {\n    var length = collection ? collection.length : 0;\n    return typeof length == 'number' ? length : keys(collection).length;\n  }\n\n  /**\n   * Checks if the `callback` returns a truthy value for **any** element of a\n   * `collection`. The function returns as soon as it finds passing value, and\n   * does not iterate over the entire `collection`. The `callback` is bound to\n   * `thisArg` and invoked with three arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias any\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Boolean} Returns `true` if any element passes the callback check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false], Boolean);\n   * // => true\n   *\n   * var food = [\n   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },\n   *   { 'name': 'carrot', 'organic': true,  'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.some(food, 'organic');\n   * // => true\n   *\n   * // using \"_.where\" callback shorthand\n   * _.some(food, { 'type': 'meat' });\n   * // => false\n   */\n  function some(collection, callback, thisArg) {\n    var result;\n    callback = createCallback(callback, thisArg);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        if ((result = callback(collection[index], index, collection))) {\n          break;\n        }\n      }\n    } else {\n      each(collection, function(value, index, collection) {\n        return !(result = callback(value, index, collection));\n      });\n    }\n    return !!result;\n  }\n\n  /**\n   * Creates an array of elements, sorted in ascending order by the results of\n   * running each element in the `collection` through the `callback`. This method\n   * performs a stable sort, that is, it will preserve the original sort order of\n   * equal elements. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index|key, collection).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of sorted elements.\n   * @example\n   *\n   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n   * // => [3, 1, 2]\n   *\n   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n   * // => [3, 1, 2]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortBy(['banana', 'strawberry', 'apple'], 'length');\n   * // => ['apple', 'banana', 'strawberry']\n   */\n  function sortBy(collection, callback, thisArg) {\n    var index = -1,\n        length = collection ? collection.length : 0,\n        result = Array(typeof length == 'number' ? length : 0);\n\n    callback = createCallback(callback, thisArg);\n    forEach(collection, function(value, key, collection) {\n      result[++index] = {\n        'criteria': callback(value, key, collection),\n        'index': index,\n        'value': value\n      };\n    });\n\n    length = result.length;\n    result.sort(compareAscending);\n    while (length--) {\n      result[length] = result[length].value;\n    }\n    return result;\n  }\n\n  /**\n   * Converts the `collection` to an array.\n   *\n   * @static\n   * @memberOf _\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to convert.\n   * @returns {Array} Returns the new converted array.\n   * @example\n   *\n   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n   * // => [2, 3, 4]\n   */\n  function toArray(collection) {\n    if (collection && typeof collection.length == 'number') {\n      return  slice(collection);\n    }\n    return values(collection);\n  }\n\n  /**\n   * Examines each element in a `collection`, returning an array of all elements\n   * that have the given `properties`. When checking `properties`, this method\n   * performs a deep comparison between values to determine if they are equivalent\n   * to each other.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Collections\n   * @param {Array|Object|String} collection The collection to iterate over.\n   * @param {Object} properties The object of property values to filter by.\n   * @returns {Array} Returns a new array of elements that have the given `properties`.\n   * @example\n   *\n   * var stooges = [\n   *   { 'name': 'moe', 'age': 40 },\n   *   { 'name': 'larry', 'age': 50 }\n   * ];\n   *\n   * _.where(stooges, { 'age': 40 });\n   * // => [{ 'name': 'moe', 'age': 40 }]\n   */\n  var where = filter;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates an array with all falsey values of `array` removed. The values\n   * `false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of `array` elements not present in the other arrays\n   * using strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Array} [array1, array2, ...] Arrays to check.\n   * @returns {Array} Returns a new array of `array` elements not present in the\n   *  other arrays.\n   * @example\n   *\n   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n   * // => [1, 3, 4]\n   */\n  function difference(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        flattened = concat.apply(arrayRef, arguments),\n        contains = cachedContains(flattened, length),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the first element of the `array`. If a number `n` is passed, the first\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the first elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias head, take\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the first element(s) of `array`.\n   * @example\n   *\n   * _.first([1, 2, 3]);\n   * // => 1\n   *\n   * _.first([1, 2, 3], 2);\n   * // => [1, 2]\n   *\n   * _.first([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [1, 2]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.first(food, 'organic');\n   * // => [{ 'name': 'banana', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.first(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'apple', 'type': 'fruit' }, { 'name': 'banana', 'type': 'fruit' }]\n   */\n  function first(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = -1;\n        callback = createCallback(callback, thisArg);\n        while (++index < length && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[0];\n        }\n      }\n      return slice(array, 0, nativeMin(nativeMax(0, n), length));\n    }\n  }\n\n  /**\n   * Flattens a nested array (the nesting can be to any depth). If `shallow` is\n   * truthy, `array` will only be flattened a single level.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to compact.\n   * @param {Boolean} shallow A flag to indicate only flattening a single level.\n   * @returns {Array} Returns a new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2], [3, [[4]]]]);\n   * // => [1, 2, 3, 4];\n   *\n   * _.flatten([1, [2], [3, [[4]]]], true);\n   * // => [1, 2, 3, [[4]]];\n   */\n  function flatten(array, shallow) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n\n      // recursively flatten arrays (susceptible to call stack limits)\n      if (isArray(value)) {\n        push.apply(result, shallow ? value : flatten(value));\n      } else {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found using\n   * strict equality for comparisons, i.e. `===`. If the `array` is already\n   * sorted, passing `true` for `fromIndex` will run a faster binary search.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Boolean|Number} [fromIndex=0] The index to search from or `true` to\n   *  perform a binary search on a sorted `array`.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 1\n   *\n   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 4\n   *\n   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n   * // => 2\n   */\n  function indexOf(array, value, fromIndex) {\n    var index = -1,\n        length = array ? array.length : 0;\n\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0) - 1;\n    } else if (fromIndex) {\n      index = sortedIndex(array, value);\n      return array[index] === value ? index : -1;\n    }\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets all but the last element of `array`. If a number `n` is passed, the\n   * last `n` elements are excluded from the result. If a `callback` function\n   * is passed, the last elements the `callback` returns truthy for are excluded\n   * from the result. The `callback` is bound to `thisArg` and invoked with three\n   * arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.initial([1, 2, 3]);\n   * // => [1, 2]\n   *\n   * _.initial([1, 2, 3], 2);\n   * // => [1]\n   *\n   * _.initial([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [1]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.initial(food, 'organic');\n   * // => [{ 'name': 'beet',   'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.initial(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'banana', 'type': 'fruit' }]\n   */\n  function initial(array, callback, thisArg) {\n    if (!array) {\n      return [];\n    }\n    var n = 0,\n        length = array.length;\n\n    if (typeof callback != 'number' && callback != null) {\n      var index = length;\n      callback = createCallback(callback, thisArg);\n      while (index-- && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : callback || n;\n    }\n    return slice(array, 0, nativeMin(nativeMax(0, length - n), length));\n  }\n\n  /**\n   * Computes the intersection of all the passed-in arrays using strict equality\n   * for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique elements that are present\n   *  in **all** of the arrays.\n   * @example\n   *\n   * _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2]\n   */\n  function intersection(array) {\n    var args = arguments,\n        argsLength = args.length,\n        cache = { '0': {} },\n        index = -1,\n        length = array ? array.length : 0,\n        isLarge = length >= 100,\n        result = [],\n        seen = result;\n\n    outer:\n    while (++index < length) {\n      var value = array[index];\n      if (isLarge) {\n        var key = value + '';\n        var inited = hasOwnProperty.call(cache[0], key)\n          ? !(seen = cache[0][key])\n          : (seen = cache[0][key] = []);\n      }\n      if (inited || indexOf(seen, value) < 0) {\n        if (isLarge) {\n          seen.push(value);\n        }\n        var argsIndex = argsLength;\n        while (--argsIndex) {\n          if (!(cache[argsIndex] || (cache[argsIndex] = cachedContains(args[argsIndex], 0, 100)))(value)) {\n            continue outer;\n          }\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Gets the last element of the `array`. If a number `n` is passed, the last\n   * `n` elements of the `array` are returned. If a `callback` function is passed,\n   * the last elements the `callback` returns truthy for are returned. The `callback`\n   * is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n] The function called\n   *  per element or the number of elements to return. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Mixed} Returns the last element(s) of `array`.\n   * @example\n   *\n   * _.last([1, 2, 3]);\n   * // => 3\n   *\n   * _.last([1, 2, 3], 2);\n   * // => [2, 3]\n   *\n   * _.last([1, 2, 3], function(num) {\n   *   return num > 1;\n   * });\n   * // => [2, 3]\n   *\n   * var food = [\n   *   { 'name': 'beet',   'organic': false },\n   *   { 'name': 'carrot', 'organic': true }\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.last(food, 'organic');\n   * // => [{ 'name': 'carrot', 'organic': true }]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' },\n   *   { 'name': 'carrot', 'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.last(food, { 'type': 'vegetable' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }, { 'name': 'carrot', 'type': 'vegetable' }]\n   */\n  function last(array, callback, thisArg) {\n    if (array) {\n      var n = 0,\n          length = array.length;\n\n      if (typeof callback != 'number' && callback != null) {\n        var index = length;\n        callback = createCallback(callback, thisArg);\n        while (index-- && callback(array[index], index, array)) {\n          n++;\n        }\n      } else {\n        n = callback;\n        if (n == null || thisArg) {\n          return array[length - 1];\n        }\n      }\n      return slice(array, nativeMax(0, length - n));\n    }\n  }\n\n  /**\n   * Gets the index at which the last occurrence of `value` is found using strict\n   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used\n   * as the offset from the end of the collection.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to search.\n   * @param {Mixed} value The value to search for.\n   * @param {Number} [fromIndex=array.length-1] The index to search from.\n   * @returns {Number} Returns the index of the matched value or `-1`.\n   * @example\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n   * // => 4\n   *\n   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n   * // => 1\n   */\n  function lastIndexOf(array, value, fromIndex) {\n    var index = array ? array.length : 0;\n    if (typeof fromIndex == 'number') {\n      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;\n    }\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Creates an object composed from arrays of `keys` and `values`. Pass either\n   * a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\n   * two arrays, one of `keys` and one of corresponding `values`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} keys The array of keys.\n   * @param {Array} [values=[]] The array of values.\n   * @returns {Object} Returns an object composed of the given keys and\n   *  corresponding values.\n   * @example\n   *\n   * _.object(['moe', 'larry'], [30, 40]);\n   * // => { 'moe': 30, 'larry': 40 }\n   */\n  function object(keys, values) {\n    var index = -1,\n        length = keys ? keys.length : 0,\n        result = {};\n\n    while (++index < length) {\n      var key = keys[index];\n      if (values) {\n        result[key] = values[index];\n      } else {\n        result[key[0]] = key[1];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array of numbers (positive and/or negative) progressing from\n   * `start` up to but not including `end`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Number} [start=0] The start of the range.\n   * @param {Number} end The end of the range.\n   * @param {Number} [step=1] The value to increment or descrement by.\n   * @returns {Array} Returns a new range array.\n   * @example\n   *\n   * _.range(10);\n   * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n   *\n   * _.range(1, 11);\n   * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n   *\n   * _.range(0, 30, 5);\n   * // => [0, 5, 10, 15, 20, 25]\n   *\n   * _.range(0, -10, -1);\n   * // => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n   *\n   * _.range(0);\n   * // => []\n   */\n  function range(start, end, step) {\n    start = +start || 0;\n    step = +step || 1;\n\n    if (end == null) {\n      end = start;\n      start = 0;\n    }\n    // use `Array(length)` so V8 will avoid the slower \"dictionary\" mode\n    // http://youtu.be/XAqIpGU8ZZk#t=17m25s\n    var index = -1,\n        length = nativeMax(0, ceil((end - start) / step)),\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.initial`, this method gets all but the first value of `array`.\n   * If a number `n` is passed, the first `n` values are excluded from the result.\n   * If a `callback` function is passed, the first elements the `callback` returns\n   * truthy for are excluded from the result. The `callback` is bound to `thisArg`\n   * and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias drop, tail\n   * @category Arrays\n   * @param {Array} array The array to query.\n   * @param {Function|Object|Number|String} [callback|n=1] The function called\n   *  per element or the number of elements to exclude. If a property name or\n   *  object is passed, it will be used to create a \"_.pluck\" or \"_.where\"\n   *  style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a slice of `array`.\n   * @example\n   *\n   * _.rest([1, 2, 3]);\n   * // => [2, 3]\n   *\n   * _.rest([1, 2, 3], 2);\n   * // => [3]\n   *\n   * _.rest([1, 2, 3], function(num) {\n   *   return num < 3;\n   * });\n   * // => [3]\n   *\n   * var food = [\n   *   { 'name': 'banana', 'organic': true },\n   *   { 'name': 'beet',   'organic': false },\n   * ];\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.rest(food, 'organic');\n   * // => [{ 'name': 'beet', 'organic': false }]\n   *\n   * var food = [\n   *   { 'name': 'apple',  'type': 'fruit' },\n   *   { 'name': 'banana', 'type': 'fruit' },\n   *   { 'name': 'beet',   'type': 'vegetable' }\n   * ];\n   *\n   * // using \"_.where\" callback shorthand\n   * _.rest(food, { 'type': 'fruit' });\n   * // => [{ 'name': 'beet', 'type': 'vegetable' }]\n   */\n  function rest(array, callback, thisArg) {\n    if (typeof callback != 'number' && callback != null) {\n      var n = 0,\n          index = -1,\n          length = array ? array.length : 0;\n\n      callback = createCallback(callback, thisArg);\n      while (++index < length && callback(array[index], index, array)) {\n        n++;\n      }\n    } else {\n      n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);\n    }\n    return slice(array, n);\n  }\n\n  /**\n   * Uses a binary search to determine the smallest index at which the `value`\n   * should be inserted into `array` in order to maintain the sort order of the\n   * sorted `array`. If `callback` is passed, it will be executed for `value` and\n   * each element in `array` to compute their sort ranking. The `callback` is\n   * bound to `thisArg` and invoked with one argument; (value).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to iterate over.\n   * @param {Mixed} value The value to evaluate.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Number} Returns the index at which the value should be inserted\n   *  into `array`.\n   * @example\n   *\n   * _.sortedIndex([20, 30, 50], 40);\n   * // => 2\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n   * // => 2\n   *\n   * var dict = {\n   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n   * };\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return dict.wordToNumber[word];\n   * });\n   * // => 2\n   *\n   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n   *   return this.wordToNumber[word];\n   * }, dict);\n   * // => 2\n   */\n  function sortedIndex(array, value, callback, thisArg) {\n    var low = 0,\n        high = array ? array.length : low;\n\n    // explicitly reference `identity` for better inlining in Firefox\n    callback = callback ? createCallback(callback, thisArg, 1) : identity;\n    value = callback(value);\n\n    while (low < high) {\n      var mid = (low + high) >>> 1;\n      callback(array[mid]) < value\n        ? low = mid + 1\n        : high = mid;\n    }\n    return low;\n  }\n\n  /**\n   * Computes the union of the passed-in arrays using strict equality for\n   * comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of unique values, in order, that are\n   *  present in one or more of the arrays.\n   * @example\n   *\n   * _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n   * // => [1, 2, 3, 101, 10]\n   */\n  function union() {\n    return uniq(concat.apply(arrayRef, arguments));\n  }\n\n  /**\n   * Creates a duplicate-value-free version of the `array` using strict equality\n   * for comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\n   * for `isSorted` will run a faster algorithm. If `callback` is passed, each\n   * element of `array` is passed through a callback` before uniqueness is computed.\n   * The `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).\n   *\n   * If a property name is passed for `callback`, the created \"_.pluck\" style\n   * callback will return the property value of the given element.\n   *\n   * If an object is passed for `callback`, the created \"_.where\" style callback\n   * will return `true` for elements that have the propeties of the given object,\n   * else `false`.\n   *\n   * @static\n   * @memberOf _\n   * @alias unique\n   * @category Arrays\n   * @param {Array} array The array to process.\n   * @param {Boolean} [isSorted=false] A flag to indicate that the `array` is already sorted.\n   * @param {Function|Object|String} [callback=identity] The function called per\n   *  iteration. If a property name or object is passed, it will be used to create\n   *  a \"_.pluck\" or \"_.where\" style callback, respectively.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a duplicate-value-free array.\n   * @example\n   *\n   * _.uniq([1, 2, 1, 3, 1]);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 1, 2, 2, 3], true);\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n   * // => [1, 2, 3]\n   *\n   * _.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n   * // => [1, 2, 3]\n   *\n   * // using \"_.pluck\" callback shorthand\n   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n   * // => [{ 'x': 1 }, { 'x': 2 }]\n   */\n  function uniq(array, isSorted, callback, thisArg) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = [],\n        seen = result;\n\n    // juggle arguments\n    if (typeof isSorted == 'function') {\n      thisArg = callback;\n      callback = isSorted;\n      isSorted = false;\n    }\n    // init value cache for large arrays\n    var isLarge = !isSorted && length >= 75;\n    if (isLarge) {\n      var cache = {};\n    }\n    if (callback) {\n      seen = [];\n      callback = createCallback(callback, thisArg);\n    }\n    while (++index < length) {\n      var value = array[index],\n          computed = callback ? callback(value, index, array) : value;\n\n      if (isLarge) {\n        var key = computed + '';\n        var inited = hasOwnProperty.call(cache, key)\n          ? !(seen = cache[key])\n          : (seen = cache[key] = []);\n      }\n      if (isSorted\n            ? !index || seen[seen.length - 1] !== computed\n            : inited || indexOf(seen, computed) < 0\n          ) {\n        if (callback || isLarge) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Creates an array with all occurrences of the passed values removed using\n   * strict equality for comparisons, i.e. `===`.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} array The array to filter.\n   * @param {Mixed} [value1, value2, ...] Values to remove.\n   * @returns {Array} Returns a new filtered array.\n   * @example\n   *\n   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n   * // => [2, 3, 4]\n   */\n  function without(array) {\n    var index = -1,\n        length = array ? array.length : 0,\n        contains = cachedContains(arguments, 1),\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (!contains(value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Groups the elements of each array at their corresponding indexes. Useful for\n   * separate data sources that are coordinated through matching array indexes.\n   * For a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\n   * in a similar fashion.\n   *\n   * @static\n   * @memberOf _\n   * @category Arrays\n   * @param {Array} [array1, array2, ...] Arrays to process.\n   * @returns {Array} Returns a new array of grouped elements.\n   * @example\n   *\n   * _.zip(['moe', 'larry'], [30, 40], [true, false]);\n   * // => [['moe', 30, true], ['larry', 40, false]]\n   */\n  function zip(array) {\n    var index = -1,\n        length = array ? max(pluck(arguments, 'length')) : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = pluck(arguments, index);\n    }\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a function that is restricted to executing `func` only after it is\n   * called `n` times. The `func` is executed with the `this` binding of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Number} n The number of times the function must be called before\n   * it is executed.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var renderNotes = _.after(notes.length, render);\n   * _.forEach(notes, function(note) {\n   *   note.asyncSave({ 'success': renderNotes });\n   * });\n   * // `renderNotes` is run once, after all notes have saved\n   */\n  function after(n, func) {\n    if (n < 1) {\n      return func();\n    }\n    return function() {\n      if (--n < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with the `this`\n   * binding of `thisArg` and prepends any additional `bind` arguments to those\n   * passed to the bound function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to bind.\n   * @param {Mixed} [thisArg] The `this` binding of `func`.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var func = function(greeting) {\n   *   return greeting + ' ' + this.name;\n   * };\n   *\n   * func = _.bind(func, { 'name': 'moe' }, 'hi');\n   * func();\n   * // => 'hi moe'\n   */\n  function bind(func, thisArg) {\n    // use `Function#bind` if it exists and is fast\n    // (in V8 `Function#bind` is slower except when partially applied)\n    return isBindFast || (nativeBind && arguments.length > 2)\n      ? nativeBind.call.apply(nativeBind, arguments)\n      : createBound(func, thisArg, slice(arguments, 2));\n  }\n\n  /**\n   * Binds methods on `object` to `object`, overwriting the existing method.\n   * Method names may be specified as individual arguments or as arrays of method\n   * names. If no method names are provided, all the function properties of `object`\n   * will be bound.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object to bind and assign the bound methods to.\n   * @param {String} [methodName1, methodName2, ...] Method names on the object to bind.\n   * @returns {Object} Returns `object`.\n   * @example\n   *\n   * var view = {\n   *  'label': 'docs',\n   *  'onClick': function() { alert('clicked ' + this.label); }\n   * };\n   *\n   * _.bindAll(view);\n   * jQuery('#docs').on('click', view.onClick);\n   * // => alerts 'clicked docs', when the button is clicked\n   */\n  function bindAll(object) {\n    var funcs = concat.apply(arrayRef, arguments),\n        index = funcs.length > 1 ? 0 : (funcs = functions(object), -1),\n        length = funcs.length;\n\n    while (++index < length) {\n      var key = funcs[index];\n      object[key] = bind(object[key], object);\n    }\n    return object;\n  }\n\n  /**\n   * Creates a function that, when called, invokes the method at `object[key]`\n   * and prepends any additional `bindKey` arguments to those passed to the bound\n   * function. This method differs from `_.bind` by allowing bound functions to\n   * reference methods that will be redefined or don't yet exist.\n   * See http://michaux.ca/articles/lazy-function-definition-pattern.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Object} object The object the method belongs to.\n   * @param {String} key The key of the method.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new bound function.\n   * @example\n   *\n   * var object = {\n   *   'name': 'moe',\n   *   'greet': function(greeting) {\n   *     return greeting + ' ' + this.name;\n   *   }\n   * };\n   *\n   * var func = _.bindKey(object, 'greet', 'hi');\n   * func();\n   * // => 'hi moe'\n   *\n   * object.greet = function(greeting) {\n   *   return greeting + ', ' + this.name + '!';\n   * };\n   *\n   * func();\n   * // => 'hi, moe!'\n   */\n  function bindKey(object, key) {\n    return createBound(object, key, slice(arguments, 2));\n  }\n\n  /**\n   * Creates a function that is the composition of the passed functions,\n   * where each function consumes the return value of the function that follows.\n   * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.\n   * Each function is executed with the `this` binding of the composed function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} [func1, func2, ...] Functions to compose.\n   * @returns {Function} Returns the new composed function.\n   * @example\n   *\n   * var greet = function(name) { return 'hi ' + name; };\n   * var exclaim = function(statement) { return statement + '!'; };\n   * var welcome = _.compose(exclaim, greet);\n   * welcome('moe');\n   * // => 'hi moe!'\n   */\n  function compose() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments,\n          length = funcs.length;\n\n      while (length--) {\n        args = [funcs[length].apply(this, args)];\n      }\n      return args[0];\n    };\n  }\n\n  /**\n   * Creates a function that will delay the execution of `func` until after\n   * `wait` milliseconds have elapsed since the last time it was invoked. Pass\n   * `true` for `immediate` to cause debounce to invoke `func` on the leading,\n   * instead of the trailing, edge of the `wait` timeout. Subsequent calls to\n   * the debounced function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to debounce.\n   * @param {Number} wait The number of milliseconds to delay.\n   * @param {Boolean} immediate A flag to indicate execution is on the leading\n   *  edge of the timeout.\n   * @returns {Function} Returns the new debounced function.\n   * @example\n   *\n   * var lazyLayout = _.debounce(calculateLayout, 300);\n   * jQuery(window).on('resize', lazyLayout);\n   */\n  function debounce(func, wait, immediate) {\n    var args,\n        result,\n        thisArg,\n        timeoutId;\n\n    function delayed() {\n      timeoutId = null;\n      if (!immediate) {\n        result = func.apply(thisArg, args);\n      }\n    }\n    return function() {\n      var isImmediate = immediate && !timeoutId;\n      args = arguments;\n      thisArg = this;\n\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(delayed, wait);\n\n      if (isImmediate) {\n        result = func.apply(thisArg, args);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Executes the `func` function after `wait` milliseconds. Additional arguments\n   * will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to delay.\n   * @param {Number} wait The number of milliseconds to delay execution.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * var log = _.bind(console.log, console);\n   * _.delay(log, 1000, 'logged later');\n   * // => 'logged later' (Appears after one second.)\n   */\n  function delay(func, wait) {\n    var args = slice(arguments, 2);\n    return setTimeout(function() { func.apply(undefined, args); }, wait);\n  }\n\n  /**\n   * Defers executing the `func` function until the current call stack has cleared.\n   * Additional arguments will be passed to `func` when it is invoked.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to defer.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to invoke the function with.\n   * @returns {Number} Returns the `setTimeout` timeout id.\n   * @example\n   *\n   * _.defer(function() { alert('deferred'); });\n   * // returns from the function before `alert` is called\n   */\n  function defer(func) {\n    var args = slice(arguments, 1);\n    return setTimeout(function() { func.apply(undefined, args); }, 1);\n  }\n  // use `setImmediate` if it's available in Node.js\n  if (isV8 && freeModule && typeof setImmediate == 'function') {\n    defer = bind(setImmediate, window);\n  }\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * passed, it will be used to determine the cache key for storing the result\n   * based on the arguments passed to the memoized function. By default, the first\n   * argument passed to the memoized function is used as the cache key. The `func`\n   * is executed with the `this` binding of the memoized function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] A function used to resolve the cache key.\n   * @returns {Function} Returns the new memoizing function.\n   * @example\n   *\n   * var fibonacci = _.memoize(function(n) {\n   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n   * });\n   */\n  function memoize(func, resolver) {\n    var cache = {};\n    return function() {\n      var key = (resolver ? resolver.apply(this, arguments) : arguments[0]) + '';\n      return hasOwnProperty.call(cache, key)\n        ? cache[key]\n        : (cache[key] = func.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Creates a function that is restricted to execute `func` once. Repeat calls to\n   * the function will return the value of the first call. The `func` is executed\n   * with the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // `initialize` executes `createApplication` once\n   */\n  function once(func) {\n    var ran,\n        result;\n\n    return function() {\n      if (ran) {\n        return result;\n      }\n      ran = true;\n      result = func.apply(this, arguments);\n\n      // clear the `func` variable so the function may be garbage collected\n      func = null;\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that, when called, invokes `func` with any additional\n   * `partial` arguments prepended to those passed to the new function. This\n   * method is similar to `_.bind`, except it does **not** alter the `this` binding.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var greet = function(greeting, name) { return greeting + ' ' + name; };\n   * var hi = _.partial(greet, 'hi');\n   * hi('moe');\n   * // => 'hi moe'\n   */\n  function partial(func) {\n    return createBound(func, slice(arguments, 1));\n  }\n\n  /**\n   * This method is similar to `_.partial`, except that `partial` arguments are\n   * appended to those passed to the new function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to partially apply arguments to.\n   * @param {Mixed} [arg1, arg2, ...] Arguments to be partially applied.\n   * @returns {Function} Returns the new partially applied function.\n   * @example\n   *\n   * var defaultsDeep = _.partialRight(_.merge, _.defaults);\n   *\n   * var options = {\n   *   'variable': 'data',\n   *   'imports': { 'jq': $ }\n   * };\n   *\n   * defaultsDeep(options, _.templateSettings);\n   *\n   * options.variable\n   * // => 'data'\n   *\n   * options.imports\n   * // => { '_': _, 'jq': $ }\n   */\n  function partialRight(func) {\n    return createBound(func, slice(arguments, 1), null, indicatorObject);\n  }\n\n  /**\n   * Creates a function that, when executed, will only call the `func`\n   * function at most once per every `wait` milliseconds. If the throttled\n   * function is invoked more than once during the `wait` timeout, `func` will\n   * also be called on the trailing edge of the timeout. Subsequent calls to the\n   * throttled function will return the result of the last `func` call.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Function} func The function to throttle.\n   * @param {Number} wait The number of milliseconds to throttle executions to.\n   * @returns {Function} Returns the new throttled function.\n   * @example\n   *\n   * var throttled = _.throttle(updatePosition, 100);\n   * jQuery(window).on('scroll', throttled);\n   */\n  function throttle(func, wait) {\n    var args,\n        result,\n        thisArg,\n        timeoutId,\n        lastCalled = 0;\n\n    function trailingCall() {\n      lastCalled = new Date;\n      timeoutId = null;\n      result = func.apply(thisArg, args);\n    }\n    return function() {\n      var now = new Date,\n          remaining = wait - (now - lastCalled);\n\n      args = arguments;\n      thisArg = this;\n\n      if (remaining <= 0) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n        lastCalled = now;\n        result = func.apply(thisArg, args);\n      }\n      else if (!timeoutId) {\n        timeoutId = setTimeout(trailingCall, remaining);\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that passes `value` to the `wrapper` function as its\n   * first argument. Additional arguments passed to the function are appended\n   * to those passed to the `wrapper` function. The `wrapper` is executed with\n   * the `this` binding of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @category Functions\n   * @param {Mixed} value The value to wrap.\n   * @param {Function} wrapper The wrapper function.\n   * @returns {Function} Returns the new function.\n   * @example\n   *\n   * var hello = function(name) { return 'hello ' + name; };\n   * hello = _.wrap(hello, function(func) {\n   *   return 'before, ' + func('moe') + ', after';\n   * });\n   * hello();\n   * // => 'before, hello moe, after'\n   */\n  function wrap(value, wrapper) {\n    return function() {\n      var args = [value];\n      push.apply(args, arguments);\n      return wrapper.apply(this, args);\n    };\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\n   * corresponding HTML entities.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to escape.\n   * @returns {String} Returns the escaped string.\n   * @example\n   *\n   * _.escape('Moe, Larry & Curly');\n   * // => 'Moe, Larry &amp; Curly'\n   */\n  function escape(string) {\n    return string == null ? '' : (string + '').replace(reUnescapedHtml, escapeHtmlChar);\n  }\n\n  /**\n   * This function returns the first argument passed to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Mixed} value Any value.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * var moe = { 'name': 'moe' };\n   * moe === _.identity(moe);\n   * // => true\n   */\n  function identity(value) {\n    return value;\n  }\n\n  /**\n   * Adds functions properties of `object` to the `lodash` function and chainable\n   * wrapper.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object of function properties to add to `lodash`.\n   * @example\n   *\n   * _.mixin({\n   *   'capitalize': function(string) {\n   *     return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n   *   }\n   * });\n   *\n   * _.capitalize('moe');\n   * // => 'Moe'\n   *\n   * _('moe').capitalize();\n   * // => 'Moe'\n   */\n  function mixin(object) {\n    forEach(functions(object), function(methodName) {\n      var func = lodash[methodName] = object[methodName];\n\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return new lodash(func.apply(lodash, args));\n      };\n    });\n  }\n\n  /**\n   * Reverts the '_' variable to its previous value and returns a reference to\n   * the `lodash` function.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @returns {Function} Returns the `lodash` function.\n   * @example\n   *\n   * var lodash = _.noConflict();\n   */\n  function noConflict() {\n    window._ = oldDash;\n    return this;\n  }\n\n  /**\n   * Produces a random number between `min` and `max` (inclusive). If only one\n   * argument is passed, a number between `0` and the given number will be returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} [min=0] The minimum possible value.\n   * @param {Number} [max=1] The maximum possible value.\n   * @returns {Number} Returns a random number.\n   * @example\n   *\n   * _.random(0, 5);\n   * // => a number between 0 and 5\n   *\n   * _.random(5);\n   * // => also a number between 0 and 5\n   */\n  function random(min, max) {\n    if (min == null && max == null) {\n      max = 1;\n    }\n    min = +min || 0;\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + floor(nativeRandom() * ((+max || 0) - min + 1));\n  }\n\n  /**\n   * Resolves the value of `property` on `object`. If `property` is a function,\n   * it will be invoked and its result returned, else the property value is\n   * returned. If `object` is falsey, then `null` is returned.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Object} object The object to inspect.\n   * @param {String} property The property to get the value of.\n   * @returns {Mixed} Returns the resolved value.\n   * @example\n   *\n   * var object = {\n   *   'cheese': 'crumpets',\n   *   'stuff': function() {\n   *     return 'nonsense';\n   *   }\n   * };\n   *\n   * _.result(object, 'cheese');\n   * // => 'crumpets'\n   *\n   * _.result(object, 'stuff');\n   * // => 'nonsense'\n   */\n  function result(object, property) {\n    var value = object ? object[property] : undefined;\n    return isFunction(value) ? object[property]() : value;\n  }\n\n  /**\n   * A micro-templating method that handles arbitrary delimiters, preserves\n   * whitespace, and correctly escapes quotes within interpolated code.\n   *\n   * Note: In the development build, `_.template` utilizes sourceURLs for easier\n   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n   *\n   * Note: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\n   * build and using precompiled templates, or loading Lo-Dash in a sandbox.\n   *\n   * For more information on precompiling templates see:\n   * http://lodash.com/#custom-builds\n   *\n   * For more information on Chrome extension sandboxes see:\n   * http://developer.chrome.com/stable/extensions/sandboxingEval.html\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} text The template text.\n   * @param {Obect} data The data object used to populate the text.\n   * @param {Object} options The options object.\n   *  escape - The \"escape\" delimiter regexp.\n   *  evaluate - The \"evaluate\" delimiter regexp.\n   *  interpolate - The \"interpolate\" delimiter regexp.\n   *  sourceURL - The sourceURL of the template's compiled source.\n   *  variable - The data object variable name.\n   *\n   * @returns {Function|String} Returns a compiled function when no `data` object\n   *  is given, else it returns the interpolated text.\n   * @example\n   *\n   * // using a compiled template\n   * var compiled = _.template('hello <%= name %>');\n   * compiled({ 'name': 'moe' });\n   * // => 'hello moe'\n   *\n   * var list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n   * _.template(list, { 'people': ['moe', 'larry'] });\n   * // => '<li>moe</li><li>larry</li>'\n   *\n   * // using the \"escape\" delimiter to escape HTML in data property values\n   * _.template('<b><%- value %></b>', { 'value': '<script>' });\n   * // => '<b>&lt;script&gt;</b>'\n   *\n   * // using the ES6 delimiter as an alternative to the default \"interpolate\" delimiter\n   * _.template('hello ${ name }', { 'name': 'curly' });\n   * // => 'hello curly'\n   *\n   * // using the internal `print` function in \"evaluate\" delimiters\n   * _.template('<% print(\"hello \" + epithet); %>!', { 'epithet': 'stooge' });\n   * // => 'hello stooge!'\n   *\n   * // using custom template delimiters\n   * _.templateSettings = {\n   *   'interpolate': /{{([\\s\\S]+?)}}/g\n   * };\n   *\n   * _.template('hello {{ name }}!', { 'name': 'mustache' });\n   * // => 'hello mustache!'\n   *\n   * // using the `sourceURL` option to specify a custom sourceURL for the template\n   * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });\n   * compiled(data);\n   * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n   *\n   * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n   * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });\n   * compiled.source;\n   * // => function(data) {\n   *   var __t, __p = '', __e = _.escape;\n   *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';\n   *   return __p;\n   * }\n   *\n   * // using the `source` property to inline compiled templates for meaningful\n   * // line numbers in error messages and a stack trace\n   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n   *   var JST = {\\\n   *     \"main\": ' + _.template(mainText).source + '\\\n   *   };\\\n   * ');\n   */\n  function template(text, data, options) {\n    // based on John Resig's `tmpl` implementation\n    // http://ejohn.org/blog/javascript-micro-templating/\n    // and Laura Doktorova's doT.js\n    // https://github.com/olado/doT\n    var settings = lodash.templateSettings;\n    text || (text = '');\n\n    // avoid missing dependencies when `iteratorTemplate` is not defined\n    options = defaults({}, options, settings);\n\n    var imports = defaults({}, options.imports, settings.imports),\n        importsKeys = keys(imports),\n        importsValues = values(imports);\n\n    var isEvaluating,\n        index = 0,\n        interpolate = options.interpolate || reNoMatch,\n        source = \"__p += '\";\n\n    // compile regexp to match each delimiter\n    var reDelimiters = RegExp(\n      (options.escape || reNoMatch).source + '|' +\n      interpolate.source + '|' +\n      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n      (options.evaluate || reNoMatch).source + '|$'\n    , 'g');\n\n    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n      interpolateValue || (interpolateValue = esTemplateValue);\n\n      // escape characters that cannot be included in string literals\n      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n      // replace delimiters with snippets\n      if (escapeValue) {\n        source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n      }\n      if (evaluateValue) {\n        isEvaluating = true;\n        source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n      }\n      if (interpolateValue) {\n        source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n      }\n      index = offset + match.length;\n\n      // the JS engine embedded in Adobe products requires returning the `match`\n      // string in order to produce the correct `offset` value\n      return match;\n    });\n\n    source += \"';\\n\";\n\n    // if `variable` is not specified and the template contains \"evaluate\"\n    // delimiters, wrap a with-statement around the generated code to add the\n    // data object to the top of the scope chain\n    var variable = options.variable,\n        hasVariable = variable;\n\n    if (!hasVariable) {\n      variable = 'obj';\n      source = 'with (' + variable + ') {\\n' + source + '\\n}\\n';\n    }\n    // cleanup code by stripping empty strings\n    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n      .replace(reEmptyStringMiddle, '$1')\n      .replace(reEmptyStringTrailing, '$1;');\n\n    // frame code as the function body\n    source = 'function(' + variable + ') {\\n' +\n      (hasVariable ? '' : variable + ' || (' + variable + ' = {});\\n') +\n      \"var __t, __p = '', __e = _.escape\" +\n      (isEvaluating\n        ? ', __j = Array.prototype.join;\\n' +\n          \"function print() { __p += __j.call(arguments, '') }\\n\"\n        : ';\\n'\n      ) +\n      source +\n      'return __p\\n}';\n\n    // Use a sourceURL for easier debugging and wrap in a multi-line comment to\n    // avoid issues with Narwhal, IE conditional compilation, and the JS engine\n    // embedded in Adobe products.\n    // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n    var sourceURL = '\\n/*\\n//@ sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\\n*/';\n\n    try {\n      var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);\n    } catch(e) {\n      e.source = source;\n      throw e;\n    }\n    if (data) {\n      return result(data);\n    }\n    // provide the compiled function's source via its `toString` method, in\n    // supported environments, or the `source` property as a convenience for\n    // inlining compiled templates during the build process\n    result.source = source;\n    return result;\n  }\n\n  /**\n   * Executes the `callback` function `n` times, returning an array of the results\n   * of each `callback` execution. The `callback` is bound to `thisArg` and invoked\n   * with one argument; (index).\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {Number} n The number of times to execute the callback.\n   * @param {Function} callback The function called per iteration.\n   * @param {Mixed} [thisArg] The `this` binding of `callback`.\n   * @returns {Array} Returns a new array of the results of each `callback` execution.\n   * @example\n   *\n   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));\n   * // => [3, 6, 4]\n   *\n   * _.times(3, function(n) { mage.castSpell(n); });\n   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n   *\n   * _.times(3, function(n) { this.cast(n); }, mage);\n   * // => also calls `mage.castSpell(n)` three times\n   */\n  function times(n, callback, thisArg) {\n    n = +n || 0;\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = callback.call(thisArg, index);\n    }\n    return result;\n  }\n\n  /**\n   * The opposite of `_.escape`, this method converts the HTML entities\n   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their\n   * corresponding characters.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} string The string to unescape.\n   * @returns {String} Returns the unescaped string.\n   * @example\n   *\n   * _.unescape('Moe, Larry &amp; Curly');\n   * // => 'Moe, Larry & Curly'\n   */\n  function unescape(string) {\n    return string == null ? '' : (string + '').replace(reEscapedHtml, unescapeHtmlChar);\n  }\n\n  /**\n   * Generates a unique ID. If `prefix` is passed, the ID will be appended to it.\n   *\n   * @static\n   * @memberOf _\n   * @category Utilities\n   * @param {String} [prefix] The value to prefix the ID with.\n   * @returns {String} Returns the unique ID.\n   * @example\n   *\n   * _.uniqueId('contact_');\n   * // => 'contact_104'\n   *\n   * _.uniqueId();\n   * // => '105'\n   */\n  function uniqueId(prefix) {\n    var id = ++idCounter;\n    return (prefix == null ? '' : prefix + '') + id;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Invokes `interceptor` with the `value` as the first argument, and then\n   * returns `value`. The purpose of this method is to \"tap into\" a method chain,\n   * in order to perform operations on intermediate results within the chain.\n   *\n   * @static\n   * @memberOf _\n   * @category Chaining\n   * @param {Mixed} value The value to pass to `interceptor`.\n   * @param {Function} interceptor The function to invoke.\n   * @returns {Mixed} Returns `value`.\n   * @example\n   *\n   * _([1, 2, 3, 4])\n   *  .filter(function(num) { return num % 2 == 0; })\n   *  .tap(alert)\n   *  .map(function(num) { return num * num; })\n   *  .value();\n   * // => // [2, 4] (alerted)\n   * // => [4, 16]\n   */\n  function tap(value, interceptor) {\n    interceptor(value);\n    return value;\n  }\n\n  /**\n   * Produces the `toString` result of the wrapped value.\n   *\n   * @name toString\n   * @memberOf _\n   * @category Chaining\n   * @returns {String} Returns the string result.\n   * @example\n   *\n   * _([1, 2, 3]).toString();\n   * // => '1,2,3'\n   */\n  function wrapperToString() {\n    return this.__wrapped__ + '';\n  }\n\n  /**\n   * Extracts the wrapped value.\n   *\n   * @name valueOf\n   * @memberOf _\n   * @alias value\n   * @category Chaining\n   * @returns {Mixed} Returns the wrapped value.\n   * @example\n   *\n   * _([1, 2, 3]).valueOf();\n   * // => [1, 2, 3]\n   */\n  function wrapperValueOf() {\n    return this.__wrapped__;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return wrapped values when chaining\n  lodash.after = after;\n  lodash.assign = assign;\n  lodash.at = at;\n  lodash.bind = bind;\n  lodash.bindAll = bindAll;\n  lodash.bindKey = bindKey;\n  lodash.compact = compact;\n  lodash.compose = compose;\n  lodash.countBy = countBy;\n  lodash.debounce = debounce;\n  lodash.defaults = defaults;\n  lodash.defer = defer;\n  lodash.delay = delay;\n  lodash.difference = difference;\n  lodash.filter = filter;\n  lodash.flatten = flatten;\n  lodash.forEach = forEach;\n  lodash.forIn = forIn;\n  lodash.forOwn = forOwn;\n  lodash.functions = functions;\n  lodash.groupBy = groupBy;\n  lodash.initial = initial;\n  lodash.intersection = intersection;\n  lodash.invert = invert;\n  lodash.invoke = invoke;\n  lodash.keys = keys;\n  lodash.map = map;\n  lodash.max = max;\n  lodash.memoize = memoize;\n  lodash.merge = merge;\n  lodash.min = min;\n  lodash.object = object;\n  lodash.omit = omit;\n  lodash.once = once;\n  lodash.pairs = pairs;\n  lodash.partial = partial;\n  lodash.partialRight = partialRight;\n  lodash.pick = pick;\n  lodash.pluck = pluck;\n  lodash.range = range;\n  lodash.reject = reject;\n  lodash.rest = rest;\n  lodash.shuffle = shuffle;\n  lodash.sortBy = sortBy;\n  lodash.tap = tap;\n  lodash.throttle = throttle;\n  lodash.times = times;\n  lodash.toArray = toArray;\n  lodash.union = union;\n  lodash.uniq = uniq;\n  lodash.values = values;\n  lodash.where = where;\n  lodash.without = without;\n  lodash.wrap = wrap;\n  lodash.zip = zip;\n\n  // add aliases\n  lodash.collect = map;\n  lodash.drop = rest;\n  lodash.each = forEach;\n  lodash.extend = assign;\n  lodash.methods = functions;\n  lodash.select = filter;\n  lodash.tail = rest;\n  lodash.unique = uniq;\n\n  // add functions to `lodash.prototype`\n  mixin(lodash);\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions that return unwrapped values when chaining\n  lodash.clone = clone;\n  lodash.cloneDeep = cloneDeep;\n  lodash.contains = contains;\n  lodash.escape = escape;\n  lodash.every = every;\n  lodash.find = find;\n  lodash.has = has;\n  lodash.identity = identity;\n  lodash.indexOf = indexOf;\n  lodash.isArguments = isArguments;\n  lodash.isArray = isArray;\n  lodash.isBoolean = isBoolean;\n  lodash.isDate = isDate;\n  lodash.isElement = isElement;\n  lodash.isEmpty = isEmpty;\n  lodash.isEqual = isEqual;\n  lodash.isFinite = isFinite;\n  lodash.isFunction = isFunction;\n  lodash.isNaN = isNaN;\n  lodash.isNull = isNull;\n  lodash.isNumber = isNumber;\n  lodash.isObject = isObject;\n  lodash.isPlainObject = isPlainObject;\n  lodash.isRegExp = isRegExp;\n  lodash.isString = isString;\n  lodash.isUndefined = isUndefined;\n  lodash.lastIndexOf = lastIndexOf;\n  lodash.mixin = mixin;\n  lodash.noConflict = noConflict;\n  lodash.random = random;\n  lodash.reduce = reduce;\n  lodash.reduceRight = reduceRight;\n  lodash.result = result;\n  lodash.size = size;\n  lodash.some = some;\n  lodash.sortedIndex = sortedIndex;\n  lodash.template = template;\n  lodash.unescape = unescape;\n  lodash.uniqueId = uniqueId;\n\n  // add aliases\n  lodash.all = every;\n  lodash.any = some;\n  lodash.detect = find;\n  lodash.foldl = reduce;\n  lodash.foldr = reduceRight;\n  lodash.include = contains;\n  lodash.inject = reduce;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName] = function() {\n        var args = [this.__wrapped__];\n        push.apply(args, arguments);\n        return func.apply(lodash, args);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // add functions capable of returning wrapped and unwrapped values when chaining\n  lodash.first = first;\n  lodash.last = last;\n\n  // add aliases\n  lodash.take = first;\n  lodash.head = first;\n\n  forOwn(lodash, function(func, methodName) {\n    if (!lodash.prototype[methodName]) {\n      lodash.prototype[methodName]= function(callback, thisArg) {\n        var result = func(this.__wrapped__, callback, thisArg);\n        return callback == null || (thisArg && typeof callback != 'function')\n          ? result\n          : new lodash(result);\n      };\n    }\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * The semantic version number.\n   *\n   * @static\n   * @memberOf _\n   * @type String\n   */\n  lodash.VERSION = '1.0.2';\n\n  // add \"Chaining\" functions to the wrapper\n  lodash.prototype.toString = wrapperToString;\n  lodash.prototype.value = wrapperValueOf;\n  lodash.prototype.valueOf = wrapperValueOf;\n\n  // add `Array` functions that return unwrapped values\n  each(['join', 'pop', 'shift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return func.apply(this.__wrapped__, arguments);\n    };\n  });\n\n  // add `Array` functions that return the wrapped value\n  each(['push', 'reverse', 'sort', 'unshift'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      func.apply(this.__wrapped__, arguments);\n      return this;\n    };\n  });\n\n  // add `Array` functions that return new wrapped values\n  each(['concat', 'slice', 'splice'], function(methodName) {\n    var func = arrayRef[methodName];\n    lodash.prototype[methodName] = function() {\n      return new lodash(func.apply(this.__wrapped__, arguments));\n    };\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // expose Lo-Dash\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lo-Dash to the global object even when an AMD loader is present in\n    // case Lo-Dash was injected by a third-party script and not intended to be\n    // loaded as a module. The global assignment can be reverted in the Lo-Dash\n    // module via its `noConflict()` method.\n    window._ = lodash;\n\n    // define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module\n    define(function() {\n      return lodash;\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports) {\n    // in Node.js or RingoJS v0.8.0+\n    if (freeModule) {\n      (freeModule.exports = lodash)._ = lodash;\n    }\n    // in Narwhal or RingoJS v0.7.0-\n    else {\n      freeExports._ = lodash;\n    }\n  }\n  else {\n    // in a browser or Rhino\n    window._ = lodash;\n  }\n}(this));\n","/**\n * MUI config module\n * @module config\n */\n\n/** Define module API */\nmodule.exports = {\n  /** Use debug mode */\n  debug: true\n};\n","/**\n * MUI CSS/JS form helpers module\n * @module lib/forms.py\n */\n\n'use strict';\n\nvar jqLite = require('./jqLite');\n\n\n/**\n * Menu position/size/scroll helper\n * @returns {Object} Object with keys 'height', 'top', 'scrollTop'\n */\nfunction getMenuPositionalCSSFn(wrapperEl, menuEl, selectedRow) {\n  var viewHeight = document.documentElement.clientHeight,\n      numRows = menuEl.children.length;\n\n  // determine menu height\n  var h = parseInt(menuEl.offsetHeight),\n      height = Math.min(h, viewHeight);\n\n  // determine row height\n  var p = parseInt(jqLite.css(menuEl, 'padding-top')),\n      rowHeight = (h - 2 * p) / numRows;\n\n  // determine 'top'\n  var top, initTop, minTop, maxTop;\n\n  initTop = -1 * selectedRow * rowHeight;\n  minTop = -1 * wrapperEl.getBoundingClientRect().top;\n  maxTop = (viewHeight - height) + minTop;\n\n  top = Math.min(Math.max(initTop, minTop), maxTop);\n\n  // determine 'scrollTop'\n  var scrollTop = 0,\n      scrollIdeal,\n      scrollMax;\n\n  if (h > viewHeight) {\n    scrollIdeal = top + p + selectedRow * rowHeight;\n    scrollMax = numRows * rowHeight + 2 * p - height;\n    scrollTop = Math.min(scrollIdeal, scrollMax);\n  }\n\n  return {\n    'height': height + 'px',\n    'top': top + 'px',\n    'scrollTop': scrollTop\n  };\n}\n\n\n/** Define module API */\nmodule.exports = {\n  getMenuPositionalCSS: getMenuPositionalCSSFn\n};\n","/**\n * MUI CSS/JS jqLite module\n * @module lib/jqLite\n */\n\n'use strict';\n\n\n/**\n * Add a class to an element.\n * @param {Element} element - The DOM element.\n * @param {string} cssClasses - Space separated list of class names.\n */\nfunction jqLiteAddClass(element, cssClasses) {\n  if (!cssClasses || !element.setAttribute) return;\n\n  var existingClasses = _getExistingClasses(element),\n      splitClasses = cssClasses.split(' '),\n      cssClass;\n\n  for (var i=0; i < splitClasses.length; i++) {\n    cssClass = splitClasses[i].trim();\n    if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {\n      existingClasses += cssClass + ' ';\n    }\n  }\n  \n  element.setAttribute('class', existingClasses.trim());\n}\n\n\n/**\n * Get or set CSS properties.\n * @param {Element} element - The DOM element.\n * @param {string} [name] - The property name.\n * @param {string} [value] - The property value.\n */\nfunction jqLiteCss(element, name, value) {\n  // Return full style object\n  if (name === undefined) {\n    return getComputedStyle(element);\n  }\n\n  var nameType = jqLiteType(name);\n\n  // Set multiple values\n  if (nameType === 'object') {\n    for (var key in name) element.style[_camelCase(key)] = name[key];\n    return;\n  }\n\n  // Set a single value\n  if (nameType === 'string' && value !== undefined) {\n    element.style[_camelCase(name)] = value;\n  }\n\n  var styleObj = getComputedStyle(element),\n      isArray = (jqLiteType(name) === 'array');\n\n  // Read single value\n  if (!isArray) return _getCurrCssProp(element, name, styleObj);\n\n  // Read multiple values\n  var outObj = {},\n      key;\n\n  for (var i=0; i < name.length; i++) {\n    key = name[i];\n    outObj[key] = _getCurrCssProp(element, key, styleObj);\n  }\n\n  return outObj;\n}\n\n\n/**\n * Check if element has class.\n * @param {Element} element - The DOM element.\n * @param {string} cls - The class name string.\n */\nfunction jqLiteHasClass(element, cls) {\n  if (!cls || !element.getAttribute) return false;\n  return (_getExistingClasses(element).indexOf(' ' + cls + ' ') > -1);\n}\n\n\n/**\n * Return the type of a variable.\n * @param {} somevar - The JavaScript variable.\n */\nfunction jqLiteType(somevar) {\n  // handle undefined\n  if (somevar === undefined) return 'undefined';\n\n  // handle others (of type [object <Type>])\n  var typeStr = Object.prototype.toString.call(somevar);\n  if (typeStr.indexOf('[object ') === 0) {\n    return typeStr.slice(8, -1).toLowerCase();\n  } else {\n    throw new Error(\"MUI: Could not understand type: \" + typeStr);\n  }    \n}\n\n\n/**\n * Attach an event handler to a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\nfunction jqLiteOn(element, events, callback, useCapture) {\n  useCapture = (useCapture === undefined) ? false : useCapture;\n\n  var cache = element._muiEventCache = element._muiEventCache || {};  \n\n  events.split(' ').map(function(event) {\n    // add to DOM\n    element.addEventListener(event, callback, useCapture);\n\n    // add to cache\n    cache[event] = cache[event] || [];\n    cache[event].push([callback, useCapture]);\n  });\n}\n\n\n/**\n * Remove an event handler from a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\nfunction jqLiteOff(element, events, callback, useCapture) {\n  useCapture = (useCapture === undefined) ? false : useCapture;\n\n  // remove from cache\n  var cache = element._muiEventCache = element._muiEventCache || {},\n      argsList,\n      args,\n      i;\n\n  events.split(' ').map(function(event) {\n    argsList = cache[event] || [];\n\n    i = argsList.length;\n    while (i--) {\n      args = argsList[i];\n\n      // remove all events if callback is undefined\n      if (callback === undefined ||\n          (args[0] === callback && args[1] === useCapture)) {\n\n        // remove from cache\n        argsList.splice(i, 1);\n        \n        // remove from DOM\n        element.removeEventListener(event, args[0], args[1]);\n      }\n    }\n  });\n}\n\n\n/**\n * Attach an event hander which will only execute once per element per event\n * @param {Element} element - The DOM element.\n * @param {string} events - Space separated event names.\n * @param {Function} callback - The callback function.\n * @param {Boolean} useCapture - Use capture flag.\n */\nfunction jqLiteOne(element, events, callback, useCapture) {\n  events.split(' ').map(function(event) {\n    jqLiteOn(element, event, function onFn(ev) {\n      // execute callback\n      if (callback) callback.apply(this, arguments);\n\n      // remove wrapper\n      jqLiteOff(element, event, onFn, useCapture);\n    }, useCapture);\n  });\n}\n\n\n/**\n * Get or set horizontal scroll position\n * @param {Element} element - The DOM element\n * @param {number} [value] - The scroll position\n */\nfunction jqLiteScrollLeft(element, value) {\n  var win = window;\n\n  // get\n  if (value === undefined) {\n    if (element === win) {\n      var docEl = document.documentElement;\n      return (win.pageXOffset || docEl.scrollLeft) - (docEl.clientLeft || 0);\n    } else {\n      return element.scrollLeft;\n    }\n  }\n\n  // set\n  if (element === win) win.scrollTo(value, jqLiteScrollTop(win));\n  else element.scrollLeft = value;\n}\n\n\n/**\n * Get or set vertical scroll position\n * @param {Element} element - The DOM element\n * @param {number} value - The scroll position\n */\nfunction jqLiteScrollTop(element, value) {\n  var win = window;\n\n  // get\n  if (value === undefined) {\n    if (element === win) {\n      var docEl = document.documentElement;\n      return (win.pageYOffset || docEl.scrollTop) - (docEl.clientTop || 0);\n    } else {\n      return element.scrollTop;\n    }\n  }\n\n  // set\n  if (element === win) win.scrollTo(jqLiteScrollLeft(win), value);\n  else element.scrollTop = value;\n}\n\n\n/**\n * Return object representing top/left offset and element height/width.\n * @param {Element} element - The DOM element.\n */\nfunction jqLiteOffset(element) {\n  var win = window,\n      rect = element.getBoundingClientRect(),\n      scrollTop = jqLiteScrollTop(win),\n      scrollLeft = jqLiteScrollLeft(win);\n\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft,\n    height: rect.height,\n    width: rect.width\n  };\n}\n\n\n/**\n * Attach a callback to the DOM ready event listener\n * @param {Function} fn - The callback function.\n */\nfunction jqLiteReady(fn) {\n  var done = false,\n      top = true,\n      doc = document,\n      win = doc.defaultView,\n      root = doc.documentElement,\n      add = doc.addEventListener ? 'addEventListener' : 'attachEvent',\n      rem = doc.addEventListener ? 'removeEventListener' : 'detachEvent',\n      pre = doc.addEventListener ? '' : 'on';\n\n  var init = function(e) {\n    if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n      return;\n    }\n\n    (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n    if (!done && (done = true)) fn.call(win, e.type || e);\n  };\n\n  var poll = function() {\n    try { root.doScroll('left'); } catch(e) { setTimeout(poll, 50); return; }\n    init('poll');\n  };\n\n  if (doc.readyState == 'complete') {\n    fn.call(win, 'lazy');\n  } else {\n    if (doc.createEventObject && root.doScroll) {\n      try { top = !win.frameElement; } catch(e) { }\n      if (top) poll();\n    }\n    doc[add](pre + 'DOMContentLoaded', init, false);\n    doc[add](pre + 'readystatechange', init, false);\n    win[add](pre + 'load', init, false);\n  }\n}\n\n\n/**\n * Remove classes from a DOM element\n * @param {Element} element - The DOM element.\n * @param {string} cssClasses - Space separated list of class names.\n */\nfunction jqLiteRemoveClass(element, cssClasses) {\n  if (!cssClasses || !element.setAttribute) return;\n\n  var existingClasses = _getExistingClasses(element),\n      splitClasses = cssClasses.split(' '),\n      cssClass;\n  \n  for (var i=0; i < splitClasses.length; i++) {\n    cssClass = splitClasses[i].trim();\n    while (existingClasses.indexOf(' ' + cssClass + ' ') >= 0) {\n      existingClasses = existingClasses.replace(' ' + cssClass + ' ', ' ');\n    }\n  }\n\n  element.setAttribute('class', existingClasses.trim());\n}\n\n\n// ------------------------------\n// Utilities\n// ------------------------------\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g,\n    MOZ_HACK_REGEXP = /^moz([A-Z])/,\n    ESCAPE_REGEXP = /([.*+?^=!:${}()|\\[\\]\\/\\\\])/g;\n\n\nfunction _getExistingClasses(element) {\n  var classes = (element.getAttribute('class') || '').replace(/[\\n\\t]/g, '');\n  return ' ' + classes + ' ';\n}\n\n\nfunction _camelCase(name) {\n  return name.\n    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {\n      return offset ? letter.toUpperCase() : letter;\n    }).\n    replace(MOZ_HACK_REGEXP, 'Moz$1');\n}\n\n\nfunction _escapeRegExp(string) {\n  return string.replace(ESCAPE_REGEXP, \"\\\\$1\");\n}\n\n\nfunction _getCurrCssProp(elem, name, computed) {\n  var ret;\n\n  // try computed style\n  ret = computed.getPropertyValue(name);\n\n  // try style attribute (if element is not attached to document)\n  if (ret === '' && !elem.ownerDocument) ret = elem.style[_camelCase(name)];\n\n  return ret;\n}\n\n\n/**\n * Module API\n */\nmodule.exports = {\n  /** Add classes */\n  addClass: jqLiteAddClass,\n\n  /** Get or set CSS properties */\n  css: jqLiteCss,\n\n  /** Check for class */\n  hasClass: jqLiteHasClass,\n\n  /** Remove event handlers */\n  off: jqLiteOff,\n\n  /** Return offset values */\n  offset: jqLiteOffset,\n\n  /** Add event handlers */\n  on: jqLiteOn,\n\n  /** Add an execute-once event handler */\n  one: jqLiteOne,\n\n  /** DOM ready event handler */\n  ready: jqLiteReady,\n\n  /** Remove classes */\n  removeClass: jqLiteRemoveClass,\n\n  /** Check JavaScript variable instance type */\n  type: jqLiteType,\n\n  /** Get or set horizontal scroll position */\n  scrollLeft: jqLiteScrollLeft,\n\n  /** Get or set vertical scroll position */\n  scrollTop: jqLiteScrollTop\n};\n","/**\n * MUI CSS/JS utilities module\n * @module lib/util\n */\n\n'use strict';\n\n\nvar config = require('../config'),\n    jqLite = require('./jqLite'),\n    scrollLock = 0,\n    scrollLockCls = 'mui-scroll-lock',\n    scrollLockPos,\n    scrollStyleEl,\n    scrollEventHandler,\n    _scrollBarWidth,\n    _supportsPointerEvents;\n\n\nscrollEventHandler = function(ev) {\n  // stop propagation on window scroll events\n  if (!ev.target.tagName) ev.stopImmediatePropagation();\n}\n\n\n/**\n * Logging function\n */\nfunction logFn() {\n  var win = window;\n  \n  if (config.debug && typeof win.console !== \"undefined\") {\n    try {\n      win.console.log.apply(win.console, arguments);\n    } catch (a) {\n      var e = Array.prototype.slice.call(arguments);\n      win.console.log(e.join(\"\\n\"));\n    }\n  }\n}\n\n\n/**\n * Load CSS text in new stylesheet\n * @param {string} cssText - The css text.\n */\nfunction loadStyleFn(cssText) {\n  var doc = document,\n      head;\n  \n  // copied from jQuery \n  head = doc.head ||\n    doc.getElementsByTagName('head')[0] ||\n    doc.documentElement;\n  \n  var e = doc.createElement('style');\n  e.type = 'text/css';\n  \n  if (e.styleSheet) e.styleSheet.cssText = cssText;\n  else e.appendChild(doc.createTextNode(cssText));\n  \n  // add to document\n  head.insertBefore(e, head.firstChild);\n  \n  return e;\n}\n\n\n/**\n * Raise an error\n * @param {string} msg - The error message.\n */\nfunction raiseErrorFn(msg, useConsole) {\n  if (useConsole) {\n    if (typeof console !== 'undefined') console.warn('MUI Warning: ' + msg);\n  } else {\n    throw new Error('MUI: ' + msg);\n  }\n}\n\n\n/**\n * Convert Classname object, with class as key and true/false as value, to an\n * class string.\n * @param  {Object} classes The classes\n * @return {String}         class string\n */\nfunction classNamesFn(classes) {\n  var cs = '';\n  for (var i in classes) {\n    cs += (classes[i]) ? i + ' ' : '';\n  }\n  return cs.trim();\n}\n\n\n/**\n * Check if client supports pointer events.\n */\nfunction supportsPointerEventsFn() {\n  // check cache\n  if (_supportsPointerEvents !== undefined) return _supportsPointerEvents;\n  \n  var element = document.createElement('x');\n  element.style.cssText = 'pointer-events:auto';\n  _supportsPointerEvents = (element.style.pointerEvents === 'auto');\n  return _supportsPointerEvents;\n}\n\n\n/**\n * Create callback closure.\n * @param {Object} instance - The object instance.\n * @param {String} funcName - The name of the callback function.\n */\nfunction callbackFn(instance, funcName) {\n  return function() {instance[funcName].apply(instance, arguments);};\n}\n\n\n/**\n * Dispatch event.\n * @param {Element} element - The DOM element.\n * @param {String} eventType - The event type.\n * @param {Boolean} bubbles=true - If true, event bubbles.\n * @param {Boolean} cancelable=true = If true, event is cancelable\n * @param {Object} [data] - Data to add to event object\n */\nfunction dispatchEventFn(element, eventType, bubbles, cancelable, data) {\n  var ev = document.createEvent('HTMLEvents'),\n      bubbles = (bubbles !== undefined) ? bubbles : true,\n       cancelable = (cancelable !== undefined) ? cancelable : true,\n       k;\n\n  ev.initEvent(eventType, bubbles, cancelable);\n  \n  // add data to event object\n  if (data) for (k in data) ev[k] = data[k];\n  \n  // dispatch\n  if (element) element.dispatchEvent(ev);\n  \n  return ev;\n}\n\n\n/**\n * Turn on window scroll lock.\n */\nfunction enableScrollLockFn() {\n  // increment counter\n  scrollLock += 1;\n  \n  // add lock\n  if (scrollLock === 1) {\n    var doc = document,\n        win = window,\n        htmlEl = doc.documentElement,\n        bodyEl = doc.body,\n        scrollBarWidth = getScrollBarWidth(),\n        cssProps,\n        cssStr,\n        x;\n\n    // define scroll lock class dynamically\n    cssProps = ['overflow:hidden'];\n\n    if (scrollBarWidth) {\n      // scrollbar-y\n      if (htmlEl.scrollHeight > htmlEl.clientHeight) {\n        x = parseInt(jqLite.css(bodyEl, 'padding-right')) + scrollBarWidth;\n        cssProps.push('padding-right:' + x + 'px');\n      }\n    \n      // scrollbar-x\n      if (htmlEl.scrollWidth > htmlEl.clientWidth) {\n        x = parseInt(jqLite.css(bodyEl, 'padding-bottom')) + scrollBarWidth;\n        cssProps.push('padding-bottom:' + x + 'px');\n      }\n    }\n\n    // define css class dynamically\n    cssStr = '.' + scrollLockCls + '{';\n    cssStr += cssProps.join(' !important;') + ' !important;}';\n    scrollStyleEl = loadStyleFn(cssStr);\n\n    // cancel 'scroll' event listener callbacks\n    jqLite.on(win, 'scroll', scrollEventHandler, true);\n\n    // add scroll lock\n    scrollLockPos = {left: jqLite.scrollLeft(win), top: jqLite.scrollTop(win)};\n    jqLite.addClass(bodyEl, scrollLockCls);\n  }\n}\n\n\n/**\n * Turn off window scroll lock.\n * @param {Boolean} resetPos - Reset scroll position to original value.\n */\nfunction disableScrollLockFn(resetPos) {\n  // ignore\n  if (scrollLock === 0) return;\n\n  // decrement counter\n  scrollLock -= 1;\n\n  // remove lock \n  if (scrollLock === 0) {\n    // remove scroll lock and delete style element\n    jqLite.removeClass(document.body, scrollLockCls);\n\n    // restore scroll position\n    if (resetPos) window.scrollTo(scrollLockPos.left, scrollLockPos.top);\n\n    // restore scroll event listeners\n    jqLite.off(window, 'scroll', scrollEventHandler, true);\n\n    // delete style element (deferred for Firefox Quantum bugfix)\n    setTimeout(function() {\n      scrollStyleEl.parentNode.removeChild(scrollStyleEl);      \n    }, 0);\n  }\n}\n\n/**\n * Return scroll bar width.\n */\nvar getScrollBarWidth = function() {\n  // check cache\n  if (_scrollBarWidth !== undefined) return _scrollBarWidth;\n  \n  // calculate scroll bar width\n  var doc = document,\n      bodyEl = doc.body,\n      el = doc.createElement('div');\n\n  el.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;' + \n    'left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;' + \n    'height:100px;\"></div></div>';\n  el = el.firstChild;\n  bodyEl.appendChild(el);\n  _scrollBarWidth = el.offsetWidth - el.clientWidth;\n  bodyEl.removeChild(el);\n\n  return _scrollBarWidth;\n}\n\n\n/**\n * requestAnimationFrame polyfilled\n * @param {Function} callback - The callback function\n */\nfunction requestAnimationFrameFn(callback) {\n  var fn = window.requestAnimationFrame;\n  if (fn) fn(callback);\n  else setTimeout(callback, 0);\n}\n\n\n/**\n * Define the module API\n */\nmodule.exports = {\n  /** Create callback closures */\n  callback: callbackFn,\n  \n  /** Classnames object to string */\n  classNames: classNamesFn,\n\n  /** Disable scroll lock */\n  disableScrollLock: disableScrollLockFn,\n\n  /** Dispatch event */\n  dispatchEvent: dispatchEventFn,\n  \n  /** Enable scroll lock */\n  enableScrollLock: enableScrollLockFn,\n\n  /** Log messages to the console when debug is turned on */\n  log: logFn,\n\n  /** Load CSS text as new stylesheet */\n  loadStyle: loadStyleFn,\n\n  /** Raise MUI error */\n  raiseError: raiseErrorFn,\n\n  /** Request animation frame */\n  requestAnimationFrame: requestAnimationFrameFn,\n\n  /** Support Pointer Events check */\n  supportsPointerEvents: supportsPointerEventsFn\n};\n","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React helpers\n * @module react/_helpers\n */\n\n'use strict';\n\nvar controlledMessage = 'You provided a `value` prop to a form field ' + 'without an `OnChange` handler. Please see React documentation on ' + 'controlled components';\n\n/** Module export */\nmodule.exports = { controlledMessage: controlledMessage };","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Textfield Helpers\n * @module react/_textfieldHelpers\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.textfieldWrapper = undefined;\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _reactAddonsShallowCompare = require('react-addons-shallow-compare');\n\nvar _reactAddonsShallowCompare2 = babelHelpers.interopRequireDefault(_reactAddonsShallowCompare);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\nvar _helpers = require('./_helpers');\n\n/**\n * Textfield Wrapper\n * @function\n */\nvar textfieldWrapper = function textfieldWrapper(TextfieldComponent) {\n  var _class, _temp;\n\n  return _temp = _class = function (_React$Component) {\n    babelHelpers.inherits(_class, _React$Component);\n\n    function _class(props) {\n      babelHelpers.classCallCheck(this, _class);\n\n      // set initial state\n      var _this = babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n      _this.state = {\n        isEmpty: isEmpty('value' in props ? props.value : props.defaultValue),\n        isTouched: false,\n        isPristine: true\n      };\n\n      // warn if value defined but onChange is not\n      if ('value' in props && !props.onChange) {\n        util.raiseError(_helpers.controlledMessage, true);\n      }\n\n      // callbacks\n      var cb = util.callback;\n      _this.onBlurCB = cb(_this, 'onBlur');\n      _this.onChangeCB = cb(_this, 'onChange');\n      _this.onLabelClickCB = cb(_this, 'onLabelClick');\n      return _this;\n    }\n\n    babelHelpers.createClass(_class, [{\n      key: 'onBlur',\n      value: function onBlur(ev) {\n        // ignore if event is a window blur\n        if (document.activeElement !== this.controlEl) {\n          this.setState({ isTouched: true });\n        }\n\n        // execute callback\n        var fn = this.props.onBlur;\n        fn && fn(ev);\n      }\n    }, {\n      key: 'onChange',\n      value: function onChange(ev) {\n        this.setState({\n          isEmpty: isEmpty(ev.target.value),\n          isPristine: false\n        });\n\n        // execute callback\n        var fn = this.props.onChange;\n        fn && fn(ev);\n      }\n    }, {\n      key: 'onLabelClick',\n      value: function onLabelClick(ev) {\n        // pointer-events shim\n        if (util.supportsPointerEvents() === false) {\n          ev.target.style.cursor = 'text';\n          this.controlEl.focus();\n        }\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n          this.setState({ isEmpty: isEmpty(nextProps.value) });\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        // disable MUI js\n        this.controlEl._muiTextfield = true;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var wrapperCls = {},\n            inputCls = {},\n            labelEl = void 0;\n\n        var _props = this.props,\n            children = _props.children,\n            className = _props.className,\n            style = _props.style,\n            hint = _props.hint,\n            invalid = _props.invalid,\n            label = _props.label,\n            floatingLabel = _props.floatingLabel,\n            other = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'style', 'hint', 'invalid', 'label', 'floatingLabel']);\n\n\n        var labelType = jqLite.type(label);\n\n        if (labelType == 'string' && label.length || labelType == 'object') {\n          labelEl = _react2.default.createElement(Label, {\n            text: label,\n            onClick: this.onClickCB,\n            htmlFor: this.props.id\n          });\n        }\n\n        wrapperCls['mui-textfield'] = true;\n        wrapperCls['mui-textfield--float-label'] = floatingLabel;\n        wrapperCls = util.classNames(wrapperCls);\n\n        inputCls['mui--is-touched'] = this.state.isTouched;\n        inputCls['mui--is-untouched'] = !this.state.isTouched;\n        inputCls['mui--is-pristine'] = this.state.isPristine;\n        inputCls['mui--is-dirty'] = !this.state.isPristine;\n        inputCls['mui--is-empty'] = this.state.isEmpty;\n        inputCls['mui--is-not-empty'] = !this.state.isEmpty;\n        inputCls['mui--is-invalid'] = invalid;\n        inputCls = util.classNames(inputCls);\n\n        return _react2.default.createElement(\n          'div',\n          {\n            className: wrapperCls + ' ' + className,\n            style: style\n          },\n          _react2.default.createElement(TextfieldComponent, babelHelpers.extends({\n            className: inputCls,\n            inputRef: function inputRef(el) {\n              _this2.controlEl = el;\n            },\n            placeholder: hint\n          }, other, {\n            onBlur: this.onBlurCB,\n            onChange: this.onChangeCB\n          })),\n          labelEl\n        );\n      }\n    }]);\n    return _class;\n  }(_react2.default.Component), _class.defaultProps = {\n    className: '',\n    hint: null,\n    invalid: false,\n    label: null,\n    floatingLabel: false\n  }, _temp;\n};\n\n/**\n * Label constructor\n * @class\n */\n\nvar Label = function (_React$Component2) {\n  babelHelpers.inherits(Label, _React$Component2);\n\n  function Label() {\n    var _ref;\n\n    var _temp2, _this3, _ret;\n\n    babelHelpers.classCallCheck(this, Label);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp2 = (_this3 = babelHelpers.possibleConstructorReturn(this, (_ref = Label.__proto__ || Object.getPrototypeOf(Label)).call.apply(_ref, [this].concat(args))), _this3), _this3.state = {\n      style: {}\n    }, _temp2), babelHelpers.possibleConstructorReturn(_this3, _ret);\n  }\n\n  babelHelpers.createClass(Label, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      this.styleTimer = setTimeout(function () {\n        var s = '.15s ease-out';\n        var style = void 0;\n\n        style = {\n          transition: s,\n          WebkitTransition: s,\n          MozTransition: s,\n          OTransition: s,\n          msTransform: s\n        };\n\n        _this4.setState({ style: style });\n      }, 150);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // clear timer\n      clearTimeout(this.styleTimer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'label',\n        {\n          style: this.state.style,\n          onClick: this.props.onClick,\n          htmlFor: this.props.htmlFor\n        },\n        this.props.text\n      );\n    }\n  }]);\n  return Label;\n}(_react2.default.Component);\n\n/**\n * isEmpty helper\n * @function\n */\n\n\nLabel.defaultProps = {\n  text: '',\n  onClick: null\n};\nfunction isEmpty(value) {\n  return value === undefined || value === null || value === '';\n}\n\n/** Define module API */\nexports.textfieldWrapper = textfieldWrapper;","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Appbar Module\n * @module react/appbar\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Appbar constructor\n * @class\n */\nvar Appbar = function (_React$Component) {\n  babelHelpers.inherits(Appbar, _React$Component);\n\n  function Appbar() {\n    babelHelpers.classCallCheck(this, Appbar);\n    return babelHelpers.possibleConstructorReturn(this, (Appbar.__proto__ || Object.getPrototypeOf(Appbar)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Appbar, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: 'mui-appbar ' + this.props.className\n        }),\n        children\n      );\n    }\n  }]);\n  return Appbar;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nAppbar.defaultProps = {\n  className: ''\n};\nexports.default = Appbar;\nmodule.exports = exports['default'];","(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports === \"object\") {\n    factory(exports);\n  } else {\n    factory(root.babelHelpers = {});\n  }\n})(this, function (global) {\n  var babelHelpers = global;\n\n  babelHelpers.classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  babelHelpers.createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  babelHelpers.extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  babelHelpers.inherits = function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  babelHelpers.interopRequireDefault = function (obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  };\n\n  babelHelpers.interopRequireWildcard = function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n\n      newObj.default = obj;\n      return newObj;\n    }\n  };\n\n  babelHelpers.objectWithoutProperties = function (obj, keys) {\n    var target = {};\n\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n\n    return target;\n  };\n\n  babelHelpers.possibleConstructorReturn = function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n});","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React button module\n * @module react/button\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n\nvar btnClass = 'mui-btn',\n    btnAttrs = { color: 1, variant: 1, size: 1 };\n\n/**\n * Button element\n * @class\n */\n\nvar Button = function (_React$Component) {\n  babelHelpers.inherits(Button, _React$Component);\n\n  function Button(props) {\n    babelHelpers.classCallCheck(this, Button);\n\n    var _this = babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));\n\n    _this.state = {\n      rippleStyle: {},\n      rippleIsVisible: false\n    };\n\n    var cb = util.callback;\n    _this.onMouseDownCB = cb(_this, 'onMouseDown');\n    _this.onMouseUpCB = cb(_this, 'onMouseUp');\n    _this.onMouseLeaveCB = cb(_this, 'onMouseLeave');\n    _this.onTouchStartCB = cb(_this, 'onTouchStart');\n    _this.onTouchEndCB = cb(_this, 'onTouchEnd');\n    return _this;\n  }\n\n  babelHelpers.createClass(Button, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // disable MUI js\n      var el = this.buttonElRef;\n      el._muiDropdown = true;\n      el._muiRipple = true;\n    }\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(ev) {\n      this.showRipple(ev);\n\n      // execute callback\n      var fn = this.props.onMouseDown;\n      fn && fn(ev);\n    }\n  }, {\n    key: 'onMouseUp',\n    value: function onMouseUp(ev) {\n      this.hideRipple(ev);\n\n      // execute callback\n      var fn = this.props.onMouseUp;\n      fn && fn(ev);\n    }\n  }, {\n    key: 'onMouseLeave',\n    value: function onMouseLeave(ev) {\n      this.hideRipple(ev);\n\n      // execute callback\n      var fn = this.props.onMouseLeave;\n      fn && fn(ev);\n    }\n  }, {\n    key: 'onTouchStart',\n    value: function onTouchStart(ev) {\n      this.showRipple(ev);\n\n      // execute callback\n      var fn = this.props.onTouchStart;\n      fn && fn(ev);\n    }\n  }, {\n    key: 'onTouchEnd',\n    value: function onTouchEnd(ev) {\n      this.hideRipple(ev);\n\n      // execute callback\n      var fn = this.props.onTouchEnd;\n      fn && fn(ev);\n    }\n  }, {\n    key: 'showRipple',\n    value: function showRipple(ev) {\n      var buttonEl = this.buttonElRef;\n\n      // de-dupe touch events\n      if ('ontouchstart' in buttonEl && ev.type === 'mousedown') return;\n\n      // get (x, y) position of click\n      var offset = jqLite.offset(this.buttonElRef),\n          clickEv = void 0;\n\n      if (ev.type === 'touchstart' && ev.touches) clickEv = ev.touches[0];else clickEv = ev;\n\n      // calculate radius\n      var radius = Math.sqrt(offset.width * offset.width + offset.height * offset.height);\n\n      var diameterPx = radius * 2 + 'px';\n\n      // add ripple to state\n      this.setState({\n        rippleStyle: {\n          top: Math.round(clickEv.pageY - offset.top - radius) + 'px',\n          left: Math.round(clickEv.pageX - offset.left - radius) + 'px',\n          width: diameterPx,\n          height: diameterPx\n        },\n        rippleIsVisible: true\n      });\n    }\n  }, {\n    key: 'hideRipple',\n    value: function hideRipple(ev) {\n      this.setState({ rippleIsVisible: false });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var state = this.state,\n          rippleEl = this.rippleElRef;\n\n      // show ripple\n      if (state.rippleIsVisible && !prevState.rippleIsVisible) {\n        jqLite.removeClass(rippleEl, 'mui--is-animating');\n        jqLite.addClass(rippleEl, 'mui--is-visible');\n\n        util.requestAnimationFrame(function () {\n          jqLite.addClass(rippleEl, 'mui--is-animating');\n        });\n      }\n\n      // hide ripple\n      if (!state.rippleIsVisible && prevState.rippleIsVisible) {\n        // allow a repaint to occur before removing class so animation shows for\n        // tap events\n        util.requestAnimationFrame(function () {\n          jqLite.removeClass(rippleEl, 'mui--is-visible');\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var cls = btnClass,\n          k = void 0,\n          v = void 0;\n\n      var _props = this.props,\n          color = _props.color,\n          size = _props.size,\n          variant = _props.variant,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['color', 'size', 'variant']);\n\n      // button attributes\n\n      for (k in btnAttrs) {\n        v = this.props[k];\n        if (v !== 'default') cls += ' ' + btnClass + '--' + v;\n      }\n\n      return _react2.default.createElement(\n        'button',\n        babelHelpers.extends({}, reactProps, {\n          ref: function ref(el) {\n            _this2.buttonElRef = el;\n          },\n          className: cls + ' ' + this.props.className,\n          onMouseUp: this.onMouseUpCB,\n          onMouseDown: this.onMouseDownCB,\n          onMouseLeave: this.onMouseLeaveCB,\n          onTouchStart: this.onTouchStartCB,\n          onTouchEnd: this.onTouchEndCB\n        }),\n        this.props.children,\n        _react2.default.createElement(\n          'span',\n          { className: 'mui-btn__ripple-container' },\n          _react2.default.createElement('span', {\n            ref: function ref(el) {\n              _this2.rippleElRef = el;\n            },\n            className: 'mui-ripple',\n            style: this.state.rippleStyle\n          })\n        )\n      );\n    }\n  }]);\n  return Button;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nButton.defaultProps = {\n  className: '',\n  color: 'default',\n  size: 'default',\n  variant: 'default'\n};\nexports.default = Button;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Caret Module\n * @module react/caret\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Caret constructor\n * @class\n */\nvar Caret = function (_React$Component) {\n  babelHelpers.inherits(Caret, _React$Component);\n\n  function Caret() {\n    babelHelpers.classCallCheck(this, Caret);\n    return babelHelpers.possibleConstructorReturn(this, (Caret.__proto__ || Object.getPrototypeOf(Caret)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Caret, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children']);\n\n\n      return _react2.default.createElement('span', babelHelpers.extends({}, reactProps, {\n        className: 'mui-caret ' + this.props.className\n      }));\n    }\n  }]);\n  return Caret;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nCaret.defaultProps = {\n  className: ''\n};\nexports.default = Caret;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React checkbox module\n * @module react/checkbox\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\nvar _helpers = require('./_helpers');\n\n/**\n * Checkbox constructor\n * @class\n */\nvar Checkbox = function (_React$Component) {\n  babelHelpers.inherits(Checkbox, _React$Component);\n\n  function Checkbox() {\n    babelHelpers.classCallCheck(this, Checkbox);\n    return babelHelpers.possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Checkbox, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          label = _props.label,\n          autoFocus = _props.autoFocus,\n          checked = _props.checked,\n          defaultChecked = _props.defaultChecked,\n          defaultValue = _props.defaultValue,\n          disabled = _props.disabled,\n          form = _props.form,\n          name = _props.name,\n          required = _props.required,\n          value = _props.value,\n          onChange = _props.onChange,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'label', 'autoFocus', 'checked', 'defaultChecked', 'defaultValue', 'disabled', 'form', 'name', 'required', 'value', 'onChange']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: 'mui-checkbox ' + className\n        }),\n        _react2.default.createElement(\n          'label',\n          null,\n          _react2.default.createElement('input', {\n            ref: function ref(el) {\n              _this2.controlEl = el;\n            },\n            type: 'checkbox',\n            autoFocus: autoFocus,\n            checked: checked,\n            defaultChecked: defaultChecked,\n            defaultValue: defaultValue,\n            disabled: disabled,\n            form: form,\n            name: name,\n            required: required,\n            value: value,\n            onChange: onChange\n          }),\n          label\n        )\n      );\n    }\n  }]);\n  return Checkbox;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nCheckbox.defaultProps = {\n  className: '',\n  label: null\n};\nexports.default = Checkbox;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Col Component\n * @module react/col\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n\nvar breakpoints = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n/**\n * Col constructor\n * @class\n */\n\nvar Col = function (_React$Component) {\n  babelHelpers.inherits(Col, _React$Component);\n\n  function Col() {\n    babelHelpers.classCallCheck(this, Col);\n    return babelHelpers.possibleConstructorReturn(this, (Col.__proto__ || Object.getPrototypeOf(Col)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Col, [{\n    key: 'render',\n    value: function render() {\n      var cls = {},\n          i = void 0,\n          bk = void 0,\n          val = void 0,\n          baseCls = void 0;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className']);\n\n      // add mui-col classes\n\n      for (i = breakpoints.length - 1; i > -1; i--) {\n        bk = breakpoints[i];\n        baseCls = 'mui-col-' + bk;\n\n        // add mui-col-{bk}-{val}\n        val = this.props[bk];\n        if (val) cls[baseCls + '-' + val] = true;\n\n        // add mui-col-{bk}-offset-{val}\n        val = this.props[bk + '-offset'];\n        if (val) cls[baseCls + '-offset-' + val] = true;\n\n        // remove from reactProps\n        delete reactProps[bk];\n        delete reactProps[bk + '-offset'];\n      }\n\n      cls = util.classNames(cls);\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: cls + ' ' + className\n        }),\n        children\n      );\n    }\n  }]);\n  return Col;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nCol.defaultProps = {\n  className: '',\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null,\n  'xs-offset': null,\n  'sm-offset': null,\n  'md-offset': null,\n  'lg-offset': null,\n  'xl-offset': null\n};\nexports.default = Col;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React container module\n * @module react/container\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Container constructor\n * @class\n */\nvar Container = function (_React$Component) {\n  babelHelpers.inherits(Container, _React$Component);\n\n  function Container() {\n    babelHelpers.classCallCheck(this, Container);\n    return babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Container, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          fluid = _props.fluid,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'fluid']);\n\n\n      var cls = 'mui-container';\n\n      // fluid containers\n      if (fluid) cls += '-fluid';\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: cls + ' ' + className\n        }),\n        children\n      );\n    }\n  }]);\n  return Container;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nContainer.defaultProps = {\n  className: '',\n  fluid: false\n};\nexports.default = Container;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React divider module\n * @module react/divider\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Divider constructor\n * @class\n */\nvar Divider = function (_React$Component) {\n  babelHelpers.inherits(Divider, _React$Component);\n\n  function Divider() {\n    babelHelpers.classCallCheck(this, Divider);\n    return babelHelpers.possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Divider, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className']);\n\n\n      return _react2.default.createElement('div', babelHelpers.extends({}, reactProps, {\n        className: 'mui-divider ' + className\n      }));\n    }\n  }]);\n  return Divider;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nDivider.defaultProps = {\n  className: ''\n};\nexports.default = Divider;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React dropdowns module\n * @module react/dropdowns\n */\n/* jshint quotmark:false */\n// jscs:disable validateQuoteMarks\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n/**\n * DropdownItem constructor\n * @class\n */\nvar DropdownItem = function (_React$Component) {\n  babelHelpers.inherits(DropdownItem, _React$Component);\n\n  function DropdownItem() {\n    babelHelpers.classCallCheck(this, DropdownItem);\n    return babelHelpers.possibleConstructorReturn(this, (DropdownItem.__proto__ || Object.getPrototypeOf(DropdownItem)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(DropdownItem, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          link = _props.link,\n          target = _props.target,\n          value = _props.value,\n          onClick = _props.onClick,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'link', 'target', 'value', 'onClick']);\n\n\n      return _react2.default.createElement(\n        'li',\n        reactProps,\n        _react2.default.createElement(\n          'a',\n          {\n            href: link,\n            target: target,\n            'data-mui-value': value,\n            onClick: onClick\n          },\n          children\n        )\n      );\n    }\n  }]);\n  return DropdownItem;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nexports.default = DropdownItem;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React dropdowns module\n * @module react/dropdowns\n */\n/* jshint quotmark:false */\n// jscs:disable validateQuoteMarks\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _button = require('./button');\n\nvar _button2 = babelHelpers.interopRequireDefault(_button);\n\nvar _caret = require('./caret');\n\nvar _caret2 = babelHelpers.interopRequireDefault(_caret);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n\nvar dropdownClass = 'mui-dropdown',\n    menuClass = 'mui-dropdown__menu',\n    openClass = 'mui--is-open',\n    rightClass = 'mui-dropdown__menu--right';\n\n/**\n * Dropdown constructor\n * @class\n */\n\nvar Dropdown = function (_React$Component) {\n  babelHelpers.inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    babelHelpers.classCallCheck(this, Dropdown);\n\n    var _this = babelHelpers.possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));\n\n    _this.state = {\n      opened: false,\n      menuTop: 0\n    };\n    var cb = util.callback;\n    _this.selectCB = cb(_this, 'select');\n    _this.onClickCB = cb(_this, 'onClick');\n    _this.onOutsideClickCB = cb(_this, 'onOutsideClick');\n    return _this;\n  }\n\n  babelHelpers.createClass(Dropdown, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      document.addEventListener('click', this.onOutsideClickCB);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.onOutsideClickCB);\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(ev) {\n      // only left clicks\n      if (ev.button !== 0) return;\n\n      // exit if toggle button is disabled\n      if (this.props.disabled) return;\n\n      if (!ev.defaultPrevented) {\n        this.toggle();\n\n        // execute <Dropdown> onClick method\n        var fn = this.props.onClick;\n        fn && fn(ev);\n      }\n    }\n  }, {\n    key: 'toggle',\n    value: function toggle() {\n      // exit if no menu element\n      if (!this.props.children) {\n        return util.raiseError('Dropdown menu element not found');\n      }\n\n      if (this.state.opened) this.close();else this.open();\n    }\n  }, {\n    key: 'open',\n    value: function open() {\n      // position menu element below toggle button\n      var wrapperRect = this.wrapperElRef.getBoundingClientRect(),\n          toggleRect = void 0;\n\n      toggleRect = this.buttonElRef.buttonElRef.getBoundingClientRect();\n\n      this.setState({\n        opened: true,\n        menuTop: toggleRect.top - wrapperRect.top + toggleRect.height\n      });\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this.setState({ opened: false });\n    }\n  }, {\n    key: 'select',\n    value: function select(ev) {\n      // onSelect callback\n      if (this.props.onSelect && ev.target.tagName === 'A') {\n        this.props.onSelect(ev.target.getAttribute('data-mui-value'));\n      }\n\n      // close menu\n      if (!ev.defaultPrevented) this.close();\n    }\n  }, {\n    key: 'onOutsideClick',\n    value: function onOutsideClick(ev) {\n      var isClickInside = this.wrapperElRef.contains(ev.target);\n      if (!isClickInside) this.close();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var buttonEl = void 0,\n          menuEl = void 0,\n          labelEl = void 0;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          color = _props.color,\n          variant = _props.variant,\n          size = _props.size,\n          label = _props.label,\n          alignMenu = _props.alignMenu,\n          onClick = _props.onClick,\n          onSelect = _props.onSelect,\n          disabled = _props.disabled,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'color', 'variant', 'size', 'label', 'alignMenu', 'onClick', 'onSelect', 'disabled']);\n\n      // build label\n\n      if (jqLite.type(label) === 'string') {\n        labelEl = _react2.default.createElement(\n          'span',\n          null,\n          label,\n          ' ',\n          _react2.default.createElement(_caret2.default, null)\n        );\n      } else {\n        labelEl = label;\n      }\n\n      buttonEl = _react2.default.createElement(\n        _button2.default,\n        {\n          ref: function ref(el) {\n            _this2.buttonElRef = el;\n          },\n          type: 'button',\n          onClick: this.onClickCB,\n          color: color,\n          variant: variant,\n          size: size,\n          disabled: disabled\n        },\n        labelEl\n      );\n\n      if (this.state.opened) {\n        var cs = {};\n\n        cs[menuClass] = true;\n        cs[openClass] = this.state.opened;\n        cs[rightClass] = alignMenu === 'right';\n        cs = util.classNames(cs);\n\n        menuEl = _react2.default.createElement(\n          'ul',\n          {\n            ref: function ref(el) {\n              _this2.menuElRef = el;\n            },\n            className: cs,\n            style: { top: this.state.menuTop },\n            onClick: this.selectCB\n          },\n          children\n        );\n      } else {\n        menuEl = _react2.default.createElement('div', null);\n      }\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          ref: function ref(el) {\n            _this2.wrapperElRef = el;\n          },\n          className: dropdownClass + ' ' + className\n        }),\n        buttonEl,\n        menuEl\n      );\n    }\n  }]);\n  return Dropdown;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nDropdown.defaultProps = {\n  className: '',\n  color: 'default',\n  variant: 'default',\n  size: 'default',\n  label: '',\n  alignMenu: 'left',\n  onClick: null,\n  onSelect: null,\n  disabled: false\n};\nexports.default = Dropdown;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React form module\n * @module react/form\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Form constructor\n * @class\n */\nvar Form = function (_React$Component) {\n  babelHelpers.inherits(Form, _React$Component);\n\n  function Form() {\n    babelHelpers.classCallCheck(this, Form);\n    return babelHelpers.possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Form, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          inline = _props.inline,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'inline']);\n\n      var cls = 'mui-form';\n\n      // inline form\n      if (inline) cls += ' mui-form--inline';\n\n      return _react2.default.createElement(\n        'form',\n        babelHelpers.extends({}, reactProps, {\n          className: cls + ' ' + className\n        }),\n        children\n      );\n    }\n  }]);\n  return Form;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nForm.defaultProps = {\n  className: '',\n  inline: false\n};\nexports.default = Form;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**                                                                            \n * MUI React Input Component\n * @module react/input\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _textfieldHelpers = require('./_textfieldHelpers');\n\n/**\n * Input constructor\n * @class\n */\nvar Input = (0, _textfieldHelpers.textfieldWrapper)(function (props) {\n  var inputRef = props.inputRef,\n      rest = babelHelpers.objectWithoutProperties(props, ['inputRef']);\n\n  return _react2.default.createElement('input', babelHelpers.extends({ ref: inputRef }, rest));\n});\n\n/** Module API */\nexports.default = Input;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React options module\n * @module react/option\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _forms = require('../js/lib/forms');\n\nvar formlib = babelHelpers.interopRequireWildcard(_forms);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\nvar _helpers = require('./_helpers');\n\n/**\n * Option constructor\n * @class\n */\nvar Option = function (_React$Component) {\n  babelHelpers.inherits(Option, _React$Component);\n\n  function Option() {\n    babelHelpers.classCallCheck(this, Option);\n    return babelHelpers.possibleConstructorReturn(this, (Option.__proto__ || Object.getPrototypeOf(Option)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Option, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          label = _props.label,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'label']);\n\n\n      return _react2.default.createElement(\n        'option',\n        reactProps,\n        label\n      );\n    }\n  }]);\n  return Option;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nOption.defaultProps = {\n  className: '',\n  label: null\n};\nexports.default = Option;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React layout module\n * @module react/layout\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Panel constructor\n * @class\n */\nvar Panel = function (_React$Component) {\n  babelHelpers.inherits(Panel, _React$Component);\n\n  function Panel() {\n    babelHelpers.classCallCheck(this, Panel);\n    return babelHelpers.possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Panel, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: 'mui-panel ' + className\n        }),\n        children\n      );\n    }\n  }]);\n  return Panel;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nPanel.defaultProps = {\n  className: ''\n};\nexports.default = Panel;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React radio module\n * @module react/radio\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Radio constructor\n * @class\n */\nvar Radio = function (_React$Component) {\n  babelHelpers.inherits(Radio, _React$Component);\n\n  function Radio() {\n    babelHelpers.classCallCheck(this, Radio);\n    return babelHelpers.possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Radio, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          label = _props.label,\n          autoFocus = _props.autoFocus,\n          checked = _props.checked,\n          defaultChecked = _props.defaultChecked,\n          defaultValue = _props.defaultValue,\n          disabled = _props.disabled,\n          form = _props.form,\n          name = _props.name,\n          required = _props.required,\n          value = _props.value,\n          onChange = _props.onChange,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'label', 'autoFocus', 'checked', 'defaultChecked', 'defaultValue', 'disabled', 'form', 'name', 'required', 'value', 'onChange']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: 'mui-radio ' + className\n        }),\n        _react2.default.createElement(\n          'label',\n          null,\n          _react2.default.createElement('input', {\n            ref: function ref(el) {\n              _this2.controlEl = el;\n            },\n            type: 'radio',\n            autoFocus: autoFocus,\n            checked: checked,\n            defaultChecked: defaultChecked,\n            defaultValue: defaultValue,\n            disabled: disabled,\n            form: form,\n            name: name,\n            required: required,\n            value: value,\n            onChange: onChange\n          }),\n          label\n        )\n      );\n    }\n  }]);\n  return Radio;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nRadio.defaultProps = {\n  className: '',\n  label: null\n};\nexports.default = Radio;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Row Component\n * @module react/row\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n\nvar breakpoints = ['xs', 'sm', 'md', 'lg'];\n\n/**\n * Row constructor\n * @class\n */\n\nvar Row = function (_React$Component) {\n  babelHelpers.inherits(Row, _React$Component);\n\n  function Row() {\n    babelHelpers.classCallCheck(this, Row);\n    return babelHelpers.possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Row, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          className: 'mui-row ' + className\n        }),\n        children\n      );\n    }\n  }]);\n  return Row;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nRow.defaultProps = {\n  className: ''\n};\nexports.default = Row;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React select module\n * @module react/select\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _forms = require('../js/lib/forms');\n\nvar formlib = babelHelpers.interopRequireWildcard(_forms);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\nvar _helpers = require('./_helpers');\n\n/**\n * Select constructor\n * @class\n */\nvar Select = function (_React$Component) {\n  babelHelpers.inherits(Select, _React$Component);\n\n  function Select(props) {\n    babelHelpers.classCallCheck(this, Select);\n\n    // warn if value defined but onChange is not\n    var _this = babelHelpers.possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    _this.state = {\n      showMenu: false\n    };\n    if (props.readOnly === false && props.value !== undefined && props.onChange === null) {\n      util.raiseError(_helpers.controlledMessage, true);\n    }\n\n    _this.state.value = props.value;\n\n    // bind callback function\n    var cb = util.callback;\n\n    _this.onInnerChangeCB = cb(_this, 'onInnerChange');\n    _this.onInnerMouseDownCB = cb(_this, 'onInnerMouseDown');\n\n    _this.onOuterClickCB = cb(_this, 'onOuterClick');\n    _this.onOuterKeyDownCB = cb(_this, 'onOuterKeyDown');\n\n    _this.hideMenuCB = cb(_this, 'hideMenu');\n    _this.onMenuChangeCB = cb(_this, 'onMenuChange');\n    return _this;\n  }\n\n  babelHelpers.createClass(Select, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // disable MUI CSS/JS\n      this.controlEl._muiSelect = true;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({ value: nextProps.value });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // ensure that doc event listners have been removed\n      jqLite.off(window, 'resize', this.hideMenuCB);\n      jqLite.off(document, 'click', this.hideMenuCB);\n    }\n  }, {\n    key: 'onInnerChange',\n    value: function onInnerChange(ev) {\n      var value = ev.target.value;\n\n      // update state\n      this.setState({ value: value });\n    }\n  }, {\n    key: 'onInnerMouseDown',\n    value: function onInnerMouseDown(ev) {\n      // only left clicks & check flag\n      if (ev.button !== 0 || this.props.useDefault) return;\n\n      // prevent built-in menu from opening\n      ev.preventDefault();\n    }\n  }, {\n    key: 'onOuterClick',\n    value: function onOuterClick(ev) {\n      // only left clicks, return if <select> is disabled\n      if (ev.button !== 0 || this.controlEl.disabled) return;\n\n      // execute callback\n      var fn = this.props.onClick;\n      fn && fn(ev);\n\n      // exit if preventDefault() was called\n      if (ev.defaultPrevented || this.props.useDefault) return;\n\n      // focus wrapper\n      this.wrapperElRef.focus();\n\n      // open custom menu\n      this.showMenu();\n    }\n  }, {\n    key: 'onOuterKeyDown',\n    value: function onOuterKeyDown(ev) {\n      // execute callback\n      var fn = this.props.onKeyDown;\n      fn && fn(ev);\n\n      // exit if preventDevault() was called or useDefault is true\n      if (ev.defaultPrevented || this.props.useDefault) return;\n\n      if (this.state.showMenu === false) {\n        var keyCode = ev.keyCode;\n\n        // spacebar, down, up\n        if (keyCode === 32 || keyCode === 38 || keyCode === 40) {\n          // prevent default browser action\n          ev.preventDefault();\n\n          // open custom menu\n          this.showMenu();\n        }\n      }\n    }\n  }, {\n    key: 'showMenu',\n    value: function showMenu() {\n      // check useDefault flag\n      if (this.props.useDefault) return;\n\n      // add event listeners\n      jqLite.on(window, 'resize', this.hideMenuCB);\n      jqLite.on(document, 'click', this.hideMenuCB);\n\n      // re-draw\n      this.setState({ showMenu: true });\n    }\n  }, {\n    key: 'hideMenu',\n    value: function hideMenu() {\n      // remove event listeners\n      jqLite.off(window, 'resize', this.hideMenuCB);\n      jqLite.off(document, 'click', this.hideMenuCB);\n\n      // re-draw\n      this.setState({ showMenu: false });\n\n      // refocus\n      this.wrapperElRef.focus();\n    }\n  }, {\n    key: 'onMenuChange',\n    value: function onMenuChange(value) {\n      if (this.props.readOnly) return;\n\n      // update inner <select> and dispatch 'change' event\n      this.controlEl.value = value;\n      util.dispatchEvent(this.controlEl, 'change');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var menuElem = void 0;\n\n      if (this.state.showMenu) {\n        menuElem = _react2.default.createElement(Menu, {\n          optionEls: this.controlEl.children,\n          wrapperEl: this.wrapperElRef,\n          onChange: this.onMenuChangeCB,\n          onClose: this.hideMenuCB\n        });\n      }\n\n      // set tab index so user can focus wrapper element\n      var tabIndexWrapper = '-1',\n          tabIndexInner = '0';\n\n      if (this.props.useDefault === false) {\n        tabIndexWrapper = '0';\n        tabIndexInner = '-1';\n      }\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          style = _props.style,\n          label = _props.label,\n          defaultValue = _props.defaultValue,\n          readOnly = _props.readOnly,\n          useDefault = _props.useDefault,\n          name = _props.name,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'style', 'label', 'defaultValue', 'readOnly', 'useDefault', 'name']);\n\n\n      return _react2.default.createElement(\n        'div',\n        babelHelpers.extends({}, reactProps, {\n          ref: function ref(el) {\n            _this2.wrapperElRef = el;\n          },\n          tabIndex: tabIndexWrapper,\n          style: style,\n          className: 'mui-select ' + className,\n          onClick: this.onOuterClickCB,\n          onKeyDown: this.onOuterKeyDownCB\n        }),\n        _react2.default.createElement(\n          'select',\n          {\n            ref: function ref(el) {\n              _this2.controlEl = el;\n            },\n            name: name,\n            tabIndex: tabIndexInner,\n            value: this.state.value,\n            defaultValue: defaultValue,\n            readOnly: this.props.readOnly,\n            onChange: this.onInnerChangeCB,\n            onMouseDown: this.onInnerMouseDownCB,\n            required: this.props.required\n          },\n          children\n        ),\n        _react2.default.createElement(\n          'label',\n          null,\n          label\n        ),\n        menuElem\n      );\n    }\n  }]);\n  return Select;\n}(_react2.default.Component);\n\n/**\n * Menu constructor\n * @class\n */\n\n\nSelect.defaultProps = {\n  className: '',\n  name: '',\n  readOnly: false,\n  useDefault: typeof document !== 'undefined' && 'ontouchstart' in document.documentElement ? true : false,\n  onChange: null,\n  onClick: null,\n  onKeyDown: null\n};\n\nvar Menu = function (_React$Component2) {\n  babelHelpers.inherits(Menu, _React$Component2);\n\n  function Menu(props) {\n    babelHelpers.classCallCheck(this, Menu);\n\n    var _this3 = babelHelpers.possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));\n\n    _this3.state = {\n      origIndex: null,\n      currentIndex: null\n    };\n\n\n    _this3.onKeyDownCB = util.callback(_this3, 'onKeyDown');\n    _this3.onKeyPressCB = util.callback(_this3, 'onKeyPress');\n    _this3.q = '';\n    _this3.qTimeout = null;\n    return _this3;\n  }\n\n  babelHelpers.createClass(Menu, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var optionEls = this.props.optionEls,\n          m = optionEls.length,\n          selectedPos = 0,\n          i = void 0;\n\n      // get current selected position\n      for (i = m - 1; i > -1; i--) {\n        if (optionEls[i].selected) selectedPos = i;\n      }this.setState({ origIndex: selectedPos, currentIndex: selectedPos });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // prevent scrolling\n      util.enableScrollLock();\n\n      var menuEl = this.wrapperElRef;\n\n      // set position\n      var props = formlib.getMenuPositionalCSS(this.props.wrapperEl, menuEl, this.state.currentIndex);\n\n      jqLite.css(menuEl, props);\n      jqLite.scrollTop(menuEl, props.scrollTop);\n\n      // attach keydown handler\n      jqLite.on(document, 'keydown', this.onKeyDownCB);\n      jqLite.on(document, 'keypress', this.onKeyPressCB);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // remove scroll lock\n      util.disableScrollLock(true);\n\n      // remove keydown handler\n      jqLite.off(document, 'keydown', this.onKeyDownCB);\n      jqLite.off(document, 'keypress', this.onKeyPressCB);\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(pos, ev) {\n      // don't allow events to bubble\n      ev.stopPropagation();\n      this.selectAndDestroy(pos);\n    }\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(ev) {\n      var keyCode = ev.keyCode;\n\n      // tab\n      if (keyCode === 9) return this.destroy();\n\n      // escape | up | down | enter\n      if (keyCode === 27 || keyCode === 40 || keyCode === 38 || keyCode === 13) {\n        ev.preventDefault();\n      }\n\n      if (keyCode === 27) this.destroy();else if (keyCode === 40) this.increment();else if (keyCode === 38) this.decrement();else if (keyCode === 13) this.selectAndDestroy();\n    }\n  }, {\n    key: 'onKeyPress',\n    value: function onKeyPress(ev) {\n      // handle query timer\n      var self = this;\n      clearTimeout(this.qTimeout);\n      this.q += ev.key;\n      this.qTimeout = setTimeout(function () {\n        self.q = '';\n      }, 300);\n\n      // select first match alphabetically\n      var prefixRegex = new RegExp('^' + this.q, 'i'),\n          optionEls = this.props.optionEls,\n          m = optionEls.length,\n          i = void 0;\n\n      for (i = 0; i < m; i++) {\n        // select item if code matches\n        if (prefixRegex.test(optionEls[i].innerText)) {\n          this.setState({ currentIndex: i });\n          break;\n        }\n      }\n    }\n  }, {\n    key: 'increment',\n    value: function increment() {\n      if (this.state.currentIndex === this.props.optionEls.length - 1) return;\n      this.setState({ currentIndex: this.state.currentIndex + 1 });\n    }\n  }, {\n    key: 'decrement',\n    value: function decrement() {\n      if (this.state.currentIndex === 0) return;\n      this.setState({ currentIndex: this.state.currentIndex - 1 });\n    }\n  }, {\n    key: 'selectAndDestroy',\n    value: function selectAndDestroy(pos) {\n      pos = pos === undefined ? this.state.currentIndex : pos;\n\n      // handle onChange\n      if (pos !== this.state.origIndex) {\n        this.props.onChange(this.props.optionEls[pos].value);\n      }\n\n      // close menu\n      this.destroy();\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.props.onClose();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var menuItems = [],\n          optionEls = this.props.optionEls,\n          m = optionEls.length,\n          optionEl = void 0,\n          cls = void 0,\n          i = void 0;\n\n      // define menu items\n      for (i = 0; i < m; i++) {\n        cls = i === this.state.currentIndex ? 'mui--is-selected ' : '';\n\n        // add custom css class from <Option> component\n        cls += optionEls[i].className;\n\n        menuItems.push(_react2.default.createElement(\n          'div',\n          {\n            key: i,\n            className: cls,\n            onClick: this.onClick.bind(this, i)\n          },\n          optionEls[i].textContent\n        ));\n      }\n\n      return _react2.default.createElement(\n        'div',\n        { ref: function ref(el) {\n            _this4.wrapperElRef = el;\n          }, className: 'mui-select__menu' },\n        menuItems\n      );\n    }\n  }]);\n  return Menu;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nMenu.defaultProps = {\n  optionEls: [],\n  wrapperEl: null,\n  onChange: null,\n  onClose: null\n};\nexports.default = Select;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React tabs module\n * @module react/tabs\n */\n/* jshint quotmark:false */\n// jscs:disable validateQuoteMarks\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\n/**\n * Tab constructor\n * @class\n */\nvar Tab = function (_React$Component) {\n  babelHelpers.inherits(Tab, _React$Component);\n\n  function Tab() {\n    babelHelpers.classCallCheck(this, Tab);\n    return babelHelpers.possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));\n  }\n\n  babelHelpers.createClass(Tab, [{\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n  return Tab;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nTab.defaultProps = {\n  value: null,\n  label: '',\n  onActive: null\n};\nexports.default = Tab;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React tabs module\n * @module react/tabs\n */\n/* jshint quotmark:false */\n// jscs:disable validateQuoteMarks\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _tab = require('./tab');\n\nvar _tab2 = babelHelpers.interopRequireDefault(_tab);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\n\nvar tabsBarClass = 'mui-tabs__bar',\n    tabsBarJustifiedClass = 'mui-tabs__bar--justified',\n    tabsPaneClass = 'mui-tabs__pane',\n    isActiveClass = 'mui--is-active';\n\n/**\n * Tabs constructor\n * @class\n */\n\nvar Tabs = function (_React$Component) {\n  babelHelpers.inherits(Tabs, _React$Component);\n\n  function Tabs(props) {\n    babelHelpers.classCallCheck(this, Tabs);\n\n    /*\n     * The following code exists only to warn about deprecating props.initialSelectedIndex in favor of props.defaultSelectedIndex.\n     * It can be removed once support for props.initialSelectedIndex is officially dropped.\n     */\n    var defaultSelectedIndex = void 0;\n    if (typeof props.initialSelectedIndex === 'number') {\n      defaultSelectedIndex = props.initialSelectedIndex;\n      if (console && process && process.env && process.NODE_ENV !== 'production') {\n        console.warn('MUICSS DEPRECATION WARNING: ' + 'property \"initialSelectedIndex\" on the muicss Tabs component is deprecated in favor of \"defaultSelectedIndex\". ' + 'It will be removed in a future release.');\n      }\n    } else {\n      defaultSelectedIndex = props.defaultSelectedIndex;\n    }\n    /*\n     * End deprecation warning\n     */\n\n    var _this = babelHelpers.possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\n    _this.state = { currentSelectedIndex: typeof props.selectedIndex === 'number' ? props.selectedIndex : defaultSelectedIndex };\n    return _this;\n  }\n\n  babelHelpers.createClass(Tabs, [{\n    key: 'onClick',\n    value: function onClick(i, tab, ev) {\n      if (typeof this.props.selectedIndex === 'number' && i !== this.props.selectedIndex || i !== this.state.currentSelectedIndex) {\n        this.setState({ currentSelectedIndex: i });\n\n        // onActive callback\n        if (tab.props.onActive) tab.props.onActive(tab);\n\n        // onChange callback\n        if (this.props.onChange) {\n          this.props.onChange(i, tab.props.value, tab, ev);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          defaultSelectedIndex = _props.defaultSelectedIndex,\n          initialSelectedIndex = _props.initialSelectedIndex,\n          justified = _props.justified,\n          selectedIndex = _props.selectedIndex,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'defaultSelectedIndex', 'initialSelectedIndex', 'justified', 'selectedIndex']);\n\n\n      var tabs = _react2.default.Children.toArray(children);\n      var tabEls = [],\n          paneEls = [],\n          m = tabs.length,\n          currentSelectedIndex = (typeof selectedIndex === 'number' ? selectedIndex : this.state.currentSelectedIndex) % m,\n          isActive = void 0,\n          item = void 0,\n          cls = void 0,\n          i = void 0;\n\n      for (i = 0; i < m; i++) {\n        item = tabs[i];\n\n        // only accept MUITab elements\n        if (item.type !== _tab2.default) util.raiseError('Expecting MUITab React Element');\n\n        isActive = i === currentSelectedIndex ? true : false;\n\n        // tab element\n        tabEls.push(_react2.default.createElement(\n          'li',\n          { key: i, className: isActive ? isActiveClass : '' },\n          _react2.default.createElement(\n            'a',\n            { onClick: this.onClick.bind(this, i, item) },\n            item.props.label\n          )\n        ));\n\n        // pane element\n        cls = tabsPaneClass + ' ';\n        if (isActive) cls += isActiveClass;\n\n        paneEls.push(_react2.default.createElement(\n          'div',\n          { key: i, className: cls },\n          item.props.children\n        ));\n      }\n\n      cls = tabsBarClass;\n      if (justified) cls += ' ' + tabsBarJustifiedClass;\n\n      return _react2.default.createElement(\n        'div',\n        reactProps,\n        _react2.default.createElement(\n          'ul',\n          { className: cls },\n          tabEls\n        ),\n        paneEls\n      );\n    }\n  }]);\n  return Tabs;\n}(_react2.default.Component);\n\n/** Define module API */\n\n\nTabs.defaultProps = {\n  className: '',\n  defaultSelectedIndex: 0,\n  /*\n   * @deprecated\n   */\n  initialSelectedIndex: null,\n  justified: false,\n  onChange: null,\n  selectedIndex: null\n};\nexports.default = Tabs;\nmodule.exports = exports['default'];","var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React Textarea Component\n * @module react/textarea\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _textfieldHelpers = require('./_textfieldHelpers');\n\n/**\n * Textarea constructor\n * @class\n */\nvar Textarea = (0, _textfieldHelpers.textfieldWrapper)(function (props) {\n  var inputRef = props.inputRef,\n      rest = babelHelpers.objectWithoutProperties(props, ['inputRef']);\n\n  // default number of rows\n\n  if (!'rows' in rest) rest.rows = 2;\n\n  return _react2.default.createElement('textarea', babelHelpers.extends({ ref: inputRef }, rest));\n});\n\nexports.default = Textarea;\nmodule.exports = exports['default'];","/**\n * MUI NPM Package\n * @module pkg/react.js\n */\n\n/** Define module API */\nmodule.exports = {\n  Appbar: require('./lib/react/appbar'),\n  Button: require('./lib/react/button'),\n  Caret: require('./lib/react/caret'),\n  Checkbox: require('./lib/react/checkbox'),\n  Col: require('./lib/react/col'),\n  Container: require('./lib/react/container'),\n  Divider: require('./lib/react/divider'),\n  Dropdown: require('./lib/react/dropdown'),\n  DropdownItem: require('./lib/react/dropdown-item'),\n  Form: require('./lib/react/form'),\n  Input: require('./lib/react/input'),\n  Option: require('./lib/react/option'),\n  Panel: require('./lib/react/panel'),\n  Radio: require('./lib/react/radio'),\n  Row: require('./lib/react/row'),\n  Select: require('./lib/react/select'),\n  Tab: require('./lib/react/tab'),\n  Tabs: require('./lib/react/tabs'),\n  Textarea: require('./lib/react/textarea')\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule shallowCompare\n */\n\n'use strict';\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\n/**\n * Does a shallow comparison for props and state.\n * See ReactComponentWithPureRenderMixin\n * See also https://facebook.github.io/react/docs/shallow-compare.html\n */\nfunction shallowCompare(instance, nextProps, nextState) {\n  return (\n    !shallowEqual(instance.props, nextProps) ||\n    !shallowEqual(instance.state, nextState)\n  );\n}\n\nmodule.exports = shallowCompare;\n","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}